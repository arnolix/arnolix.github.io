<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>arnolix&#39;s silence</title>
  
  <subtitle>你的努力决定了你的下限，你的格局决定了你的上限。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.arnolix.com/"/>
  <updated>2018-10-26T09:24:58.188Z</updated>
  <id>http://www.arnolix.com/</id>
  
  <author>
    <name>arnolix</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django template 过滤器</title>
    <link href="http://www.arnolix.com/2018/10/26/Django-template-%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://www.arnolix.com/2018/10/26/Django-template-过滤器/</id>
    <published>2018-10-26T09:17:32.000Z</published>
    <updated>2018-10-26T09:24:58.188Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、形式：小写"><a href="#一、形式：小写" class="headerlink" title="一、形式：小写"></a>一、形式：小写</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; name | lower &#125;&#125;</div></pre></td></tr></table></figure><h4 id="二、过滤器是可以嵌套的，字符串经过三个过滤器，第一个过滤器转换为小写，第二个过滤器输出首字母，第三个过滤器将首字母转换成大写"><a href="#二、过滤器是可以嵌套的，字符串经过三个过滤器，第一个过滤器转换为小写，第二个过滤器输出首字母，第三个过滤器将首字母转换成大写" class="headerlink" title="二、过滤器是可以嵌套的，字符串经过三个过滤器，第一个过滤器转换为小写，第二个过滤器输出首字母，第三个过滤器将首字母转换成大写"></a>二、过滤器是可以嵌套的，字符串经过三个过滤器，第一个过滤器转换为小写，第二个过滤器输出首字母，第三个过滤器将首字母转换成大写</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">标签</div><div class="line">&#123;&#123; str|lower|first|upper &#125;&#125;</div></pre></td></tr></table></figure><h4 id="三、过滤器的参数"><a href="#三、过滤器的参数" class="headerlink" title="三、过滤器的参数"></a>三、过滤器的参数</h4><p>显示前30个字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; bio | truncatewords:&quot;30&quot; &#125;&#125;</div></pre></td></tr></table></figure></p><p>格式化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; pub_date | date:&quot;F j, Y&quot; &#125;&#125;</div></pre></td></tr></table></figure></p><p>过滤器列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; 123|add:&quot;5&quot; &#125;&#125; 给value加上一个数值</div><div class="line"></div><div class="line">&#123;&#123; &quot;AB&apos;CD&quot;|addslashes &#125;&#125; 单引号加上转义号，一般用于输出到javascript中</div><div class="line"></div><div class="line">&#123;&#123; &quot;abcd&quot;|capfirst &#125;&#125; 第一个字母大写</div><div class="line"></div><div class="line">&#123;&#123; &quot;abcd&quot;|center:&quot;50&quot; &#125;&#125; 输出指定长度的字符串，并把值对中</div><div class="line"></div><div class="line">&#123;&#123; &quot;123spam456spam789&quot;|cut:&quot;spam&quot; &#125;&#125; 查找删除指定字符串</div><div class="line"></div><div class="line">&#123;&#123; value|date:&quot;F j, Y&quot; &#125;&#125; 格式化日期</div><div class="line"></div><div class="line">&#123;&#123; value|default:&quot;(N/A)&quot; &#125;&#125; 值不存在，使用指定值</div><div class="line"></div><div class="line">&#123;&#123; value|default_if_none:&quot;(N/A)&quot; &#125;&#125; 值是None，使用指定值</div><div class="line"></div><div class="line">&#123;&#123; 列表变量|dictsort:&quot;数字&quot; &#125;&#125; 排序从小到大</div><div class="line"></div><div class="line">&#123;&#123; 列表变量|dictsortreversed:&quot;数字&quot; &#125;&#125; 排序从大到小</div><div class="line"></div><div class="line">&#123;% if 92|pisibleby:&quot;2&quot; %&#125; 判断是否整除指定数字</div><div class="line"></div><div class="line">&#123;&#123; string|escape &#125;&#125; 转换为html实体</div><div class="line"></div><div class="line">&#123;&#123; 21984124|filesizeformat &#125;&#125; 以1024为基数，计算最大值，保留1位小数，增加可读性</div><div class="line"></div><div class="line">&#123;&#123; list|first &#125;&#125; 返回列表第一个元素</div><div class="line"></div><div class="line">&#123;&#123; &quot;ik23hr&amp;jqwh&quot;|fix_ampersands &#125;&#125; &amp;转为&amp;</div><div class="line"></div><div class="line">&#123;&#123; 13.414121241|floatformat &#125;&#125; 保留1位小数，可为负数，几种形式</div><div class="line"></div><div class="line">&#123;&#123; 13.414121241|floatformat:&quot;2&quot; &#125;&#125; 保留2位小数</div><div class="line"></div><div class="line">&#123;&#123; 23456 |get_digit:&quot;1&quot; &#125;&#125; 从个位数开始截取指定位置的1个数字</div><div class="line"></div><div class="line">&#123;&#123; list|join:&quot;, &quot; &#125;&#125; 用指定分隔符连接列表</div><div class="line"></div><div class="line">&#123;&#123; list|length &#125;&#125; 返回列表个数</div><div class="line"></div><div class="line">&#123;% if 列表|length_is:&quot;3&quot; %&#125; 列表个数是否指定数值</div><div class="line"></div><div class="line">&#123;&#123; &quot;ABCD&quot;|linebreaks &#125;&#125; value中的&quot;\n&quot;将被&lt;br/&gt;替代，并且整个value使用&lt;/p&gt;包围起来，从而适和HTML的格式</div><div class="line"></div><div class="line">&#123;&#123; &quot;ABCD&quot;|linebreaksbr &#125;&#125; value中的&quot;\n&quot;将被&lt;br/&gt;替代</div><div class="line"></div><div class="line">&#123;&#123; 变量|linenumbers &#125;&#125; 为变量中每一行加上行号</div><div class="line"></div><div class="line">&#123;&#123; &quot;abcd&quot;|ljust:&quot;50&quot; &#125;&#125; 把字符串在指定宽度中对左，其它用空格填充</div><div class="line"></div><div class="line">&#123;&#123; &quot;ABCD&quot;|lower &#125;&#125; 小写</div><div class="line"></div><div class="line">&#123;% for i in &quot;1abc1&quot;|make_list %&#125;ABCDE,&#123;% endfor %&#125; 把字符串或数字的字符个数作为一个列表</div><div class="line"></div><div class="line">&#123;&#123; &quot;abcdefghijklmnopqrstuvwxyz&quot;|phone2numeric &#125;&#125; 把字符转为可以对应的数字？？</div><div class="line"></div><div class="line">&#123;&#123; 列表或数字|pluralize &#125;&#125; 单词的复数形式，如列表字符串个数大于1，返回s，否则返回空串</div><div class="line"></div><div class="line">&#123;&#123; 列表或数字|pluralize:&quot;es&quot; &#125;&#125; 指定es</div><div class="line"></div><div class="line">&#123;&#123; 列表或数字|pluralize:&quot;y,ies&quot; &#125;&#125; 指定ies替换为y</div><div class="line"></div><div class="line">&#123;&#123; object|pprint &#125;&#125; 显示一个对象的值</div><div class="line"></div><div class="line">&#123;&#123; 列表|random &#125;&#125; 返回列表的随机一项</div><div class="line"></div><div class="line">&#123;&#123; string|removetags:&quot;br p p&quot; &#125;&#125; 删除字符串中指定html标记</div><div class="line"></div><div class="line">&#123;&#123; string|rjust:&quot;50&quot; &#125;&#125; 把字符串在指定宽度中对右，其它用空格填充</div><div class="line"></div><div class="line">&#123;&#123; 列表|slice:&quot;:2&quot; &#125;&#125; 切片</div><div class="line"></div><div class="line">&#123;&#123; string|slugify &#125;&#125; 字符串中留下减号和下划线，其它符号删除，空格用减号替换</div><div class="line"></div><div class="line">&#123;&#123; 3|stringformat:&quot;02i&quot; &#125;&#125; 字符串格式，使用Python的字符串格式语法</div><div class="line"></div><div class="line">&#123;&#123; &quot;EABCD&quot;|striptags &#125;&#125; 剥去[X]HTML语法标记</div><div class="line"></div><div class="line">&#123;&#123; 时间变量|time:&quot;P&quot; &#125;&#125; 日期的时间部分格式</div><div class="line"></div><div class="line">&#123;&#123; datetime|timesince &#125;&#125; 给定日期到现在过去了多少时间</div><div class="line"></div><div class="line">&#123;&#123; datetime|timesince:&quot;other_datetime&quot; &#125;&#125; 两日期间过去了多少时间</div><div class="line"></div><div class="line">&#123;&#123; datetime|timeuntil &#125;&#125; 给定日期到现在过去了多少时间，与上面的区别在于2日期的前后位置。</div><div class="line"></div><div class="line">&#123;&#123; datetime|timeuntil:&quot;other_datetime&quot; &#125;&#125; 两日期间过去了多少时间</div><div class="line"></div><div class="line">&#123;&#123; &quot;abdsadf&quot;|title &#125;&#125; 首字母大写</div><div class="line"></div><div class="line">&#123;&#123; &quot;A B C D E F&quot;|truncatewords:&quot;3&quot; &#125;&#125; 截取指定个数的单词</div><div class="line"></div><div class="line">&#123;&#123; &quot;111221&quot;|truncatewords_html:&quot;2&quot; &#125;&#125; 截取指定个数的html标记，并补完整</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">&#123;&#123; list|unordered_list &#125;&#125;</div><div class="line">多重嵌套列表展现为html的无序列表</div><div class="line"></div><div class="line">&#123;&#123; string|upper &#125;&#125; 全部大写</div><div class="line"></div><div class="line">linkage url编码</div><div class="line"></div><div class="line">&#123;&#123; string|urlize &#125;&#125; 将URLs由纯文本变为可点击的链接。 </div><div class="line"></div><div class="line">&#123;&#123; string|urlizetrunc:&quot;30&quot; &#125;&#125; 同上，多个截取字符数。 </div><div class="line"></div><div class="line">&#123;&#123; &quot;B C D E F&quot;|wordcount &#125;&#125; 单词数</div><div class="line"></div><div class="line">&#123;&#123; &quot;a b c d e f g h i j k&quot;|wordwrap:&quot;5&quot; &#125;&#125; 每指定数量的字符就插入回车符</div><div class="line"></div><div class="line">&#123;&#123; boolean|yesno:&quot;Yes,No,Perhaps&quot; &#125;&#125; 对三种值的返回字符串，对应是 非空,空,None。</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、形式：小写&quot;&gt;&lt;a href=&quot;#一、形式：小写&quot; class=&quot;headerlink&quot; title=&quot;一、形式：小写&quot;&gt;&lt;/a&gt;一、形式：小写&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="django" scheme="http://www.arnolix.com/categories/django/"/>
    
    
      <category term="django" scheme="http://www.arnolix.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>requests</title>
    <link href="http://www.arnolix.com/2018/09/20/requests/"/>
    <id>http://www.arnolix.com/2018/09/20/requests/</id>
    <published>2018-09-20T07:11:47.000Z</published>
    <updated>2018-09-20T07:13:42.877Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://www.django-rest-framework.org/api-guide/requests/" target="_blank" rel="external">官方原文链接</a></p><p>如果你正在开发基于 REST 的 web API 服务…… 应该忽略 request.POST。<br>— <em>Malcom Tredinnick，Django 开发组</em></p></blockquote><p>REST framework 的 <code>Request</code> 类扩展与标准的 <code>HttpRequest</code>，并做了相应的增强，比如更加灵活的请求解析（request parsing）和认证（request authentication）。</p><h2 id="Request-解析"><a href="#Request-解析" class="headerlink" title="Request 解析"></a>Request 解析</h2><p>REST framwork 的 <code>Request</code> 对象提供了灵活的请求解析，允许你使用 JSON data 或 其他 media types 像通常处理表单数据一样处理请求。</p><h3 id="data"><a href="#data" class="headerlink" title=".data"></a>.data</h3><p><code>request.data</code> 返回请求主题的解析内容。这跟标准的 <code>request.POST</code> 和 <code>request.FILES</code> 类似，并且还具有以下特点：</p><ul><li>包括所有解析的内容，文件（file） 和 非文件（non-file inputs）。</li><li>支持解析 <code>POST</code> 以外的 HTTP method ， 比如 <code>PUT</code>， <code>PATCH</code>。</li><li>更加灵活，不仅仅支持表单数据，传入同样的 JSON 数据一样可以正确解析，并且不用做额外的处理（意思是前端不管提交的是表单数据，还是 JSON 数据，<code>.data</code> 都能够正确解析）。</li></ul><p><em>.data 具体操作，以后再说～</em></p><h3 id="query-params"><a href="#query-params" class="headerlink" title=".query_params"></a>.query_params</h3><p><code>request.query_params</code> 等同于 <code>request.GET</code>，不过其名字更加容易理解。</p><p>为了代码更加清晰可读，推荐使用 <code>request.query_params</code> ，而不是 Django 中的 <code>request.GET</code>，这样那够让你的代码更加明显的体现出 —– 任何 HTTP method 类型都可能包含查询参数（query parameters），而不仅仅只是 ‘GET’ 请求。</p><h3 id="parsers"><a href="#parsers" class="headerlink" title=".parsers"></a>.parsers</h3><p><code>APIView</code> 类或者 <code>@api_view</code> 装饰器将根据视图上设置的 <code>parser_classes</code> 或 <code>settings</code> 文件中的 <code>DEFAULT_PARSER_CLASSES</code> 设置来确保此属性（<code>.parsers</code>）自动设置为 <code>Parser</code> 实例列表。</p><p><strong>通常不需要关注该属性……</strong></p><p>如果你非要看看它里面是什么，可以打印出来看看，大概长这样：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&lt;rest_framework.parsers.JSONParser object at 0x7fa850202d68&gt;, &lt;rest_framework.parsers.FormParser object at 0x7fa850202be0&gt;, &lt;rest_framework.parsers.MultiPartParser object at 0x7fa850202860&gt;]</div></pre></td></tr></table></figure></p><p>恩，包含三个解析器 <code>JSONParser</code>，<code>FormParser</code>，<code>MultiPartParser</code>。</p><blockquote><p>注意： 如果客户端发送格式错误的内容，则访问 <code>request.data</code> 可能会引发 <code>ParseError</code> 。默认情况下， REST framework 的 <code>APIView</code> 类或者 <code>@api_view</code> 装饰器将捕获错误并返回 <code>400 Bad Request</code> 响应。<br>如果客户端发送的请求内容无法解析（不同于格式错误），则会引发 <code>UnsupportedMediaType</code> 异常，默认情况下会被捕获并返回 <code>415 Unsupported Media Type</code> 响应。</p></blockquote><h2 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h2><p>该请求公开了一些属性，允许你确定内容协商阶段的结果。这使你可以实施一些行为，例如为不同媒体类型选择不同的序列化方案。</p><h3 id="accepted-renderer"><a href="#accepted-renderer" class="headerlink" title=".accepted_renderer"></a>.accepted_renderer</h3><p>渲染器实例是由内容协商阶段选择的。</p><h3 id="accepted-media-type"><a href="#accepted-media-type" class="headerlink" title=".accepted_media_type"></a>.accepted_media_type</h3><p>表示内容协商阶段接受的 media type 的字符串。</p><h2 id="认证（Authentication）"><a href="#认证（Authentication）" class="headerlink" title="认证（Authentication）"></a>认证（Authentication）</h2><p>REST framework 提供了灵活的认证方式：</p><ul><li>可以在 API 的不同部分使用不同的认证策略。</li><li>支持同时使用多个身份验证策略。</li><li>提供与传入请求关联的用户（user）和令牌（token）信息。</li></ul><h3 id="user"><a href="#user" class="headerlink" title=".user"></a>.user</h3><p><code>request.user</code> 通常会返回 <code>django.contrib.auth.models.User</code> 的一个实例，但其行为取决于正在使用的身份验证策略。</p><p>如果请求未经身份验证，则 <code>request.user</code> 的默认值是 <code>django.contrib.auth.models.AnonymousUser</code> 的实例（就是匿名用户）。</p><p><em>关于 <code>.user</code> 的更多内容，以后再说～</em></p><h3 id="auth"><a href="#auth" class="headerlink" title=".auth"></a>.auth</h3><p><code>request.auth</code> 返回任何附加的认证上下文（authentication context）。<code>request.auth</code> 的确切行为取决于正在使用的身份验证策略，但它通常可能是请求经过身份验证的令牌（token）实例。</p><p>如果请求未经身份验证，或者没有附加上下文（context），则 <code>request.auth</code> 的默认值为 <code>None</code>。</p><p><em>关于 <code>.auth</code> 的更多内容，以后再说～</em></p><h3 id="authenticators"><a href="#authenticators" class="headerlink" title=".authenticators"></a>.authenticators</h3><p><code>APIView</code> 类或 <code>@api_view</code> 装饰器将确保根据视图上设置的 <code>authentication_classes</code> 或基于 <code>settings</code> 文件中的 <code>DEFAULT_AUTHENTICATORS</code> 设置将此属性（<code>.authenticators</code>）自动设置为 <code>Authentication</code> 实例列表。</p><p><strong>通常不需要关注该属性…… </strong></p><blockquote><p>注意：调用 <code>.user</code> 或 <code>.auth</code> 属性时可能会引发 <code>WrappedAttributeError</code> 异常。这些错误源于 authenticator  作为一个标准的 <code>AttributeError</code> ，为了防止它们被外部属性访问修改，有必要重新提升为不同的异常类型。Python 无法识别来自 authenticator  的 <code>AttributeError</code>，并会立即假定请求对象没有 <code>.user</code> 或 <code>.auth</code> 属性。authenticator 需要修复。</p></blockquote><p>多说几句</p><p><code>.authenticators</code> 其实存的就是当前使用的认证器（authenticator）列表，打印出来大概是这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&lt;rest_framework.authentication.SessionAuthentication object at 0x7f8ae4528710&gt;, &lt;rest_framework.authentication.BasicAuthentication object at 0x7f8ae45286d8&gt;]</div></pre></td></tr></table></figure><p>可以看到这里使用的认证器（authenticator）包括 <code>SessionAuthentication</code> 和 <code>BasicAuthentication</code>。</p><h2 id="浏览器增强"><a href="#浏览器增强" class="headerlink" title="浏览器增强"></a>浏览器增强</h2><p>REST framework 支持基于浏览器的 <code>PUT</code>，<code>PATCH</code>，<code>DELETE</code> 表单。</p><h3 id="method"><a href="#method" class="headerlink" title=".method"></a>.method</h3><p><code>request.method</code> 返回请求 HTTP 方法的大写字符串表示形式。如 <code>GET</code>,<code>POST</code>…。</p><p>透明地支持基于浏览器的 <code>PUT</code>，<code>PATCH</code> 和 <code>DELETE</code> 表单。</p><p><em>更多相关信息以后再说～</em></p><h3 id="content-type"><a href="#content-type" class="headerlink" title=".content_type"></a>.content_type</h3><p><code>request.content_type</code> 返回表示 HTTP 请求正文的媒体类型（media type）的字符串对象（比如： <code>text/plain</code> , <code>text/html</code> 等），如果没有提供媒体类型，则返回空字符串。</p><p>通常不需要直接访问此属性，一般都依赖与 REST 框架的默认请求解析行为。</p><p>不建议使用 <code>request.META.get(&#39;HTTP_CONTENT_TYPE&#39;)</code> 来获取 content type 。</p><p><em>更多相关信息以后再说～</em></p><h3 id="stream"><a href="#stream" class="headerlink" title=".stream"></a>.stream</h3><p><code>request.stream</code> 返回一个代表请求主体内容的流。</p><p>通常不需要直接访问此属性，一般都依赖与 REST 框架的默认请求解析行为。</p><h2 id="标准的-HttpRequest-属性"><a href="#标准的-HttpRequest-属性" class="headerlink" title="标准的 HttpRequest 属性"></a>标准的 HttpRequest 属性</h2><p>由于 REST framework 的 <code>Request</code> 扩展于 Django 的 <code>HttpRequest</code>，所有其他标准属性和方法也可用。例如<code>request.META</code> 和 <code>request.session</code> 字典都可以正常使用。</p><p>请注意，由于实现原因，<code>Request</code> 类不会从 <code>HttpRequest</code> 类继承，而是使用组合扩展类（优先使用组合，而非继承，恩，老铁没毛病 0.0）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.django-rest-framework.org/api-guide/requests/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你正在开发基
      
    
    </summary>
    
      <category term="restframework" scheme="http://www.arnolix.com/categories/restframework/"/>
    
    
      <category term="requests, django, restframework, djangorestframework" scheme="http://www.arnolix.com/tags/requests-django-restframework-djangorestframework/"/>
    
  </entry>
  
  <entry>
    <title>filtering</title>
    <link href="http://www.arnolix.com/2018/09/10/filtering/"/>
    <id>http://www.arnolix.com/2018/09/10/filtering/</id>
    <published>2018-09-10T10:09:34.000Z</published>
    <updated>2018-09-10T10:12:08.744Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://www.django-rest-framework.org/api-guide/filtering/" target="_blank" rel="external">官方原文链接</a>  </p></blockquote><h1 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h1><p>REST framework 的通用列表视图的默认行为是从模型管理器返回整个查询集。通常你会希望 API 限制查询集返回的条目。</p><p>筛选 <code>GenericAPIView</code> 子类的查询集的最简单方法是重写 <code>.get_queryset()</code> 方法。</p><p>重写此方法允许你以多种不同方式自定义视图返回的查询集。</p><h2 id="根据当前用户进行过滤"><a href="#根据当前用户进行过滤" class="headerlink" title="根据当前用户进行过滤"></a>根据当前用户进行过滤</h2><p>你可能需要过滤查询集，以确保只返回与当前通过身份验证的用户发出的请求相关的结果。</p><p>你可以基于 <code>request.user</code> 的值进行筛选来完成此操作。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Purchase</div><div class="line"><span class="keyword">from</span> myapp.serializers <span class="keyword">import</span> PurchaseSerializer</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PurchaseList</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    serializer_class = PurchaseSerializer</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        This view should return a list of all the purchases</span></div><div class="line"><span class="string">        for the currently authenticated user.</span></div><div class="line"><span class="string">        """</span></div><div class="line">        user = self.request.user</div><div class="line">        <span class="keyword">return</span> Purchase.objects.filter(purchaser=user)</div></pre></td></tr></table></figure><h2 id="根据-URL-进行过滤"><a href="#根据-URL-进行过滤" class="headerlink" title="根据 URL 进行过滤"></a>根据 URL 进行过滤</h2><p>另一种过滤方式可能涉及基于 URL 的某个部分限制查询集。</p><p>例如，如果你的 URL 配置包含这样的条目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url(<span class="string">'^purchases/(?P&lt;username&gt;.+)/$'</span>, PurchaseList.as_view()),</div></pre></td></tr></table></figure><p>然后，你可以编写一个视图，返回由 URL 的用户名部分过滤的 purchase 查询集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PurchaseList</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    serializer_class = PurchaseSerializer</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        This view should return a list of all the purchases for</span></div><div class="line"><span class="string">        the user as determined by the username portion of the URL.</span></div><div class="line"><span class="string">        """</span></div><div class="line">        username = self.kwargs[<span class="string">'username'</span>]</div><div class="line">        <span class="keyword">return</span> Purchase.objects.filter(purchaser__username=username)</div></pre></td></tr></table></figure><h2 id="根据查询参数进行过滤"><a href="#根据查询参数进行过滤" class="headerlink" title="根据查询参数进行过滤"></a>根据查询参数进行过滤</h2><p>过滤初始查询集的最后一个例子是根据 url 中的查询参数确定初始查询集。</p><p>我们可以覆盖 <code>.get_queryset()</code> 来处理诸如 <code>http://example.com/api/purchases?username=denvercoder9</code> 的URL，并且只有在 URL 中包含 <code>username</code> 参数时才过滤查询集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PurchaseList</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    serializer_class = PurchaseSerializer</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        Optionally restricts the returned purchases to a given user,</span></div><div class="line"><span class="string">        by filtering against a `username` query parameter in the URL.</span></div><div class="line"><span class="string">        """</span></div><div class="line">        queryset = Purchase.objects.all()</div><div class="line">        username = self.request.query_params.get(<span class="string">'username'</span>, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">if</span> username <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            queryset = queryset.filter(purchaser__username=username)</div><div class="line">        <span class="keyword">return</span> queryset</div></pre></td></tr></table></figure><hr><h1 id="通用过滤器"><a href="#通用过滤器" class="headerlink" title="通用过滤器"></a>通用过滤器</h1><p>除了能够覆盖默认的查询集外，REST framework 还包括对通用过滤后端的支​​持，使你可以轻松构建复杂的搜索和过滤器。</p><p>通用过滤器也可以在可浏览的 API 和管理 API 中将自己渲染为 HTML 控件。</p><p><img src="http://www.django-rest-framework.org/img/filter-controls.png" alt="Filter Example"></p><h2 id="设置过滤器后端"><a href="#设置过滤器后端" class="headerlink" title="设置过滤器后端"></a>设置过滤器后端</h2><p>可以使用 <code>DEFAULT_FILTER_BACKENDS</code> setting 全局设置默认的过滤器后端。例如。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    <span class="string">'DEFAULT_FILTER_BACKENDS'</span>: (<span class="string">'django_filters.rest_framework.DjangoFilterBackend'</span>,)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>你还可以使用基于 <code>GenericAPIView</code> 类的视图，在每个视图或视图集的基础上设置过滤器后端。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> django_filters.rest_framework</div><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</div><div class="line"><span class="keyword">from</span> myapp.serializers <span class="keyword">import</span> UserSerializer</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListView</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    queryset = User.objects.all()</div><div class="line">    serializer_class = UserSerializer</div><div class="line">    filter_backends = (django_filters.rest_framework.DjangoFilterBackend,)</div></pre></td></tr></table></figure><h2 id="过滤和对象查找"><a href="#过滤和对象查找" class="headerlink" title="过滤和对象查找"></a>过滤和对象查找</h2><p>请注意，如果为一个视图配置了一个过滤器后端，那么除了用于筛选列表视图之外，它还将用于筛选返回单个对象的查询集。</p><p>例如，根据前面的示例以及 ID 为 <code>4675</code> 的产品，以下 URL 将返回相应的对象，或返回 404 响应，具体取决于给定产品实例是否满足过滤条件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://example.com/api/products/4675/?category=clothing&amp;max_price=10.00</div></pre></td></tr></table></figure><h2 id="覆盖初始查询集"><a href="#覆盖初始查询集" class="headerlink" title="覆盖初始查询集"></a>覆盖初始查询集</h2><p>请注意，你可以同时重写的 <code>.get_queryset()</code> 和通用过滤，并且所有内容都将按预期工作。例如，如果产品与用户具有多对多关系，则可能需要编写一个如下所示的视图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PurchasedProductsList</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    Return a list of all the products that the authenticated</span></div><div class="line"><span class="string">    user has ever purchased, with optional filtering.</span></div><div class="line"><span class="string">    """</span></div><div class="line">    model = Product</div><div class="line">    serializer_class = ProductSerializer</div><div class="line">    filter_class = ProductFilter</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></div><div class="line">        user = self.request.user</div><div class="line">        <span class="keyword">return</span> user.purchase_set.all()</div></pre></td></tr></table></figure><hr><h1 id="API-参考"><a href="#API-参考" class="headerlink" title="API 参考"></a>API 参考</h1><h2 id="DjangoFilterBackend"><a href="#DjangoFilterBackend" class="headerlink" title="DjangoFilterBackend"></a>DjangoFilterBackend</h2><p><code>django-filter</code> 库包含一个 <code>DjangoFilterBackend</code> 类，它支持 REST framework 对字段过滤进行高度定制。</p><p>要使用 <code>DjangoFilterBackend</code>，首先安装 <code>django-filter</code>。然后将 <code>django_filters</code> 添加到 Django 的 <code>INSTALLED_APPS</code> 中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install django-filter</div></pre></td></tr></table></figure><p>你现在应该将过滤器后端添加到设置中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    <span class="string">'DEFAULT_FILTER_BACKENDS'</span>: (<span class="string">'django_filters.rest_framework.DjangoFilterBackend'</span>,)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>或者将过滤器后端添加到单个视图或视图集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListView</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    ...</div><div class="line">    filter_backends = (DjangoFilterBackend,)</div></pre></td></tr></table></figure><p>如果你只需要简单的基于等式的过滤，则可以在视图或视图集上设置 <code>filter_fields</code> 属性，列出你要过滤的一组字段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductList</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    queryset = Product.objects.all()</div><div class="line">    serializer_class = ProductSerializer</div><div class="line">    filter_backends = (DjangoFilterBackend,)</div><div class="line">    filter_fields = (<span class="string">'category'</span>, <span class="string">'in_stock'</span>)</div></pre></td></tr></table></figure><p>这将自动为给定字段创建一个 <code>FilterSet</code> 类，并允许你发出如下请求：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://example.com/api/products?category=clothing&amp;in_stock=True</div></pre></td></tr></table></figure><p>对于更高级的过滤要求，你应该在视图上在指定 <code>FilterSet</code> 类。你可以在 <a href="https://django-filter.readthedocs.io/en/latest/index.html" target="_blank" rel="external">django-filter 文档</a>中阅读有关 <code>FilterSet</code> 的更多信息。还建议你阅读 <a href="https://django-filter.readthedocs.io/en/latest/guide/rest_framework.html" target="_blank" rel="external">DRF integration</a>。</p><h2 id="SearchFilter"><a href="#SearchFilter" class="headerlink" title="SearchFilter"></a>SearchFilter</h2><p><code>SearchFilter</code> 类支持简单的基于单个查询参数的搜索，并且基于 Django 管理员的搜索功能。</p><p>在使用时，可浏览的 API 将包含一个 <code>SearchFilter</code> 控件：</p><p><img src="http://www.django-rest-framework.org/img/search-filter.png" alt="Search Filter"></p><p><code>SearchFilter</code> 类将仅在视图具有 <code>search_fields</code> 属性集的情况下应用。<code>search_fields</code> 属性应该是模型上文本类型字段的名称列表，例如 <code>CharField</code> 或 <code>TextField</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListView</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    queryset = User.objects.all()</div><div class="line">    serializer_class = UserSerializer</div><div class="line">    filter_backends = (filters.SearchFilter,)</div><div class="line">    search_fields = (<span class="string">'username'</span>, <span class="string">'email'</span>)</div></pre></td></tr></table></figure><p>这将允许客户端通过查询来过滤列表中的项目，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://example.com/api/users?search=russell</div></pre></td></tr></table></figure><p>你还可以使用查找 API 双下划线表示法对 ForeignKey 或 ManyToManyField 执行相关查找：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">search_fields = (<span class="string">'username'</span>, <span class="string">'email'</span>, <span class="string">'profile__profession'</span>)</div></pre></td></tr></table></figure><p>默认情况下，搜索将使用不区分大小写的部分匹配。搜索参数可能包含多个搜索词，它们应该是空格和（或）逗号分隔的。如果使用多个搜索条件，则只有在所有提供的条件匹配的情况下，对象才会返回到列表中。</p><p>搜索行为可以通过将各种字符预先添加到 <code>search_fields</code> 来限制。</p><ul><li>‘^’ 匹配起始部分。</li><li>‘=’ 完全匹配。</li><li>‘@’ 全文搜索。（目前只支持 Django 的 MySQL 后端。）</li><li>‘$’ 正则匹配。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">search_fields = (<span class="string">'=username'</span>, <span class="string">'=email'</span>)</div></pre></td></tr></table></figure><p>默认情况下，搜索参数被命名为 <code>&#39;search&#39;</code> ，但这可能会被 <code>SEARCH_PARAM</code> setting 覆盖。</p><p>有关更多详细信息，请参阅 <a href="https://docs.djangoproject.com/en/stable/ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields" target="_blank" rel="external">Django 文档</a>。</p><hr><h2 id="OrderingFilter"><a href="#OrderingFilter" class="headerlink" title="OrderingFilter"></a>OrderingFilter</h2><p><code>OrderingFilter</code> 类支持简单查询参数控制结果的排序。</p><p><img src="http://www.django-rest-framework.org/img/ordering-filter.png" alt="Ordering Filter"></p><p>默认情况下，查询参数被命名为 <code>&#39;ordering&#39;</code>，但这可能会被 <code>ORDERING_PARAM</code> setting 覆盖。</p><p>例如，要通过 username 对用户排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://example.com/api/users?ordering=username</div></pre></td></tr></table></figure><p>客户端也可以通过在字段名称前加 ‘ - ‘ 来指定反向排序，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://example.com/api/users?ordering=-username</div></pre></td></tr></table></figure><p>也可以指定多个排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://example.com/api/users?ordering=account,username</div></pre></td></tr></table></figure><h3 id="指定可以根据哪些字段进行排序"><a href="#指定可以根据哪些字段进行排序" class="headerlink" title="指定可以根据哪些字段进行排序"></a>指定可以根据哪些字段进行排序</h3><p>建议你明确指定 API 应该允许在排序过滤器中使用哪些字段。你可以通过在视图上设置一个 <code>ordering_fields</code> 属性来完成此操作，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListView</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    queryset = User.objects.all()</div><div class="line">    serializer_class = UserSerializer</div><div class="line">    filter_backends = (filters.OrderingFilter,)</div><div class="line">    ordering_fields = (<span class="string">'username'</span>, <span class="string">'email'</span>)</div></pre></td></tr></table></figure><p>这有助于防止意外的数据泄漏，例如允许用户根据密码哈希字段或其他敏感数据进行排序。</p><p>如果你未在视图上指定 <code>ordering_fields</code> 属性，则过滤器类将默认允许用户过滤由 <code>serializer_class</code> 属性指定的序列化类中的任何可读字段。</p><p>如果你确信视图使用的查询集不包含任何敏感数据，则还可以通过使用特殊值 <code>&#39;__all__&#39;</code> 明确指定视图允许在任何模型字段或查询集聚合上进行排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookingsListView</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    queryset = Booking.objects.all()</div><div class="line">    serializer_class = BookingSerializer</div><div class="line">    filter_backends = (filters.OrderingFilter,)</div><div class="line">    ordering_fields = <span class="string">'__all__'</span></div></pre></td></tr></table></figure><h3 id="指定默认顺序"><a href="#指定默认顺序" class="headerlink" title="指定默认顺序"></a>指定默认顺序</h3><p>如果在视图上设置了 <code>ordering</code> 属性，则将用作默认排序。</p><p>通常情况下，你应该通过在初始查询集上设置 <code>order_by</code> 来控制此操作，但是通过在视图上使用 <code>ordering</code> 参数，你可以指定排序方式，然后可以将其作为上下文自动传递到渲染的模板。这可以自动渲染列标题，如果它们用于排序结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListView</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    queryset = User.objects.all()</div><div class="line">    serializer_class = UserSerializer</div><div class="line">    filter_backends = (filters.OrderingFilter,)</div><div class="line">    ordering_fields = (<span class="string">'username'</span>, <span class="string">'email'</span>)</div><div class="line">    ordering = (<span class="string">'username'</span>,)</div></pre></td></tr></table></figure><p><code>ordering</code> 属性可以是一个字符串或者字符串列表（元组）。</p><hr><h2 id="DjangoObjectPermissionsFilter"><a href="#DjangoObjectPermissionsFilter" class="headerlink" title="DjangoObjectPermissionsFilter"></a>DjangoObjectPermissionsFilter</h2><p><code>DjangoObjectPermissionsFilter</code> 旨在与 <a href="https://django-guardian.readthedocs.io/" target="_blank" rel="external"><code>django-guardian</code></a> 软件包一起使用，添加了自定义 <code>&#39;view&#39;</code> 的权限。过滤器将确保查询集仅返回用户具有适当查看权限的对象。</p><p>如果你使用的是 <code>DjangoObjectPermissionsFilter</code>，那么你可能还需要添加适当的对象权限类，以确保用户只有在具有适当对象权限的情况下才能对实例进行操作。做到这一点的最简单方法是继承 <code>DjangoObjectPermissions</code> 并为 <code>perms_map</code> 属性添加 <code>&#39;view&#39;</code> 权限。</p><p>使用 <code>DjangoObjectPermissionsFilter</code> 和 <code>DjangoObjectPermissions</code> 的完整示例可能如下所示。</p><p><strong>permissions.py</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomObjectPermissions</span><span class="params">(permissions.DjangoObjectPermissions)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    Similar to `DjangoObjectPermissions`, but adding 'view' permissions.</span></div><div class="line"><span class="string">    """</span></div><div class="line">    perms_map = &#123;</div><div class="line">        <span class="string">'GET'</span>: [<span class="string">'%(app_label)s.view_%(model_name)s'</span>],</div><div class="line">        <span class="string">'OPTIONS'</span>: [<span class="string">'%(app_label)s.view_%(model_name)s'</span>],</div><div class="line">        <span class="string">'HEAD'</span>: [<span class="string">'%(app_label)s.view_%(model_name)s'</span>],</div><div class="line">        <span class="string">'POST'</span>: [<span class="string">'%(app_label)s.add_%(model_name)s'</span>],</div><div class="line">        <span class="string">'PUT'</span>: [<span class="string">'%(app_label)s.change_%(model_name)s'</span>],</div><div class="line">        <span class="string">'PATCH'</span>: [<span class="string">'%(app_label)s.change_%(model_name)s'</span>],</div><div class="line">        <span class="string">'DELETE'</span>: [<span class="string">'%(app_label)s.delete_%(model_name)s'</span>],</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p><strong>views.py</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    Viewset that only lists events if user has 'view' permissions, and only</span></div><div class="line"><span class="string">    allows operations on individual events if user has appropriate 'view', 'add',</span></div><div class="line"><span class="string">    'change' or 'delete' permissions.</span></div><div class="line"><span class="string">    """</span></div><div class="line">    queryset = Event.objects.all()</div><div class="line">    serializer_class = EventSerializer</div><div class="line">    filter_backends = (filters.DjangoObjectPermissionsFilter,)</div><div class="line">    permission_classes = (myapp.permissions.CustomObjectPermissions,)</div></pre></td></tr></table></figure><hr><h1 id="自定义通用过滤器"><a href="#自定义通用过滤器" class="headerlink" title="自定义通用过滤器"></a>自定义通用过滤器</h1><p>你还可以提供自己的通用过滤器后端，或者编写一个可供其他开发人员使用的可安装应用程序。</p><p>为此，请继承 <code>BaseFilterBackend</code>，并覆盖 <code>.filter_queryset(self, request, queryset, view)</code> 方法。该方法应该返回一个新的，过滤的查询集。</p><p>除了允许客户端执行搜索和过滤外，通用过滤器后端可用于限制哪些对象应该对给定的请求或用户可见。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>你可能需要限制用户只能看到他们创建的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsOwnerFilterBackend</span><span class="params">(filters.BaseFilterBackend)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    Filter that only allows users to see their own objects.</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter_queryset</span><span class="params">(self, request, queryset, view)</span>:</span></div><div class="line">        <span class="keyword">return</span> queryset.filter(owner=request.user)</div></pre></td></tr></table></figure><p>我们可以通过覆盖视图上的 <code>get_queryset()</code>来实现相同的行为，但使用过滤器后端允许你更轻松地将此限制添加到多个视图，或者将其应用于整个 API。</p><h2 id="自定义接口"><a href="#自定义接口" class="headerlink" title="自定义接口"></a>自定义接口</h2><p>通用过滤器也可以在可浏览的 API 中渲染接口。为此，你应该实现一个 <code>to_html()</code> 方法，该方法返回过滤器的渲染 HTML 表示。此方法应具有以下签名：</p><p><code>to_html(self, request, queryset, view)</code></p><p>该方法应该返回一个渲染的 HTML 字符串。</p><h2 id="Pagination-amp-schemas"><a href="#Pagination-amp-schemas" class="headerlink" title="Pagination &amp; schemas"></a>Pagination &amp; schemas</h2><p>通过实现 <code>get_schema_fields()</code> 方法，你还可以使过滤器控件可用于 REST framework 提供的模式自动生成。此方法应具有以下签名：</p><p><code>get_schema_fields(self, view)</code></p><p>该方法应该返回一个 <code>coreapi.Field</code> 实例列表。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.django-rest-framework.org/api-guide/filtering/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方原文链接&lt;/a&gt;  &lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
      <category term="restframework" scheme="http://www.arnolix.com/categories/restframework/"/>
    
    
      <category term="filtering, restframework, djangoframework, drf, drf-filtering" scheme="http://www.arnolix.com/tags/filtering-restframework-djangoframework-drf-drf-filtering/"/>
    
  </entry>
  
  <entry>
    <title>nginx之location和rewrite详解</title>
    <link href="http://www.arnolix.com/2018/06/20/nginx%E4%B9%8Blocation%E5%92%8Crewrite%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.arnolix.com/2018/06/20/nginx之location和rewrite详解/</id>
    <published>2018-06-20T06:34:33.000Z</published>
    <updated>2018-07-04T10:13:38.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-location正则写法"><a href="#1-location正则写法" class="headerlink" title="1. location正则写法"></a>1. location正则写法</h2><p>一个示例：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">location</span>  = / &#123;</div><div class="line">  <span class="comment"># 精确匹配 / ，主机名后面不能带任何字符串</span></div><div class="line">  [ configuration A ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="attribute">location</span>  / &#123;</div><div class="line">  <span class="comment"># 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</span></div><div class="line">  <span class="comment"># 但是正则和最长字符串会优先匹配</span></div><div class="line">  [ configuration B ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="attribute">location</span> /documents/ &#123;</div><div class="line">  <span class="comment"># 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</span></div><div class="line">  <span class="comment"># 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span></div><div class="line">  [ configuration C ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="attribute">location</span> <span class="regexp">~ /documents/Abc</span> &#123;</div><div class="line">  <span class="comment"># 匹配任何以 /documents/Abc 开头的地址，匹配符合以后，还要继续往下搜索</span></div><div class="line">  <span class="comment"># 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span></div><div class="line">  [ configuration CC ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /images/ &#123;</div><div class="line">  <span class="comment"># 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。</span></div><div class="line">  [ configuration D ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|jpeg)$</span> &#123;</div><div class="line">  <span class="comment"># 匹配所有以 gif,jpg或jpeg 结尾的请求</span></div><div class="line">  <span class="comment"># 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则</span></div><div class="line">  [ configuration E ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="attribute">location</span> /images/ &#123;</div><div class="line">  <span class="comment"># 字符匹配到 /images/，继续往下，会发现 ^~ 存在</span></div><div class="line">  [ configuration F ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="attribute">location</span> /images/abc &#123;</div><div class="line">  <span class="comment"># 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在</span></div><div class="line">  <span class="comment"># F与G的放置顺序是没有关系的</span></div><div class="line">  [ configuration G ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="attribute">location</span> <span class="regexp">~ /images/abc/</span> &#123;</div><div class="line">  <span class="comment"># 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用</span></div><div class="line">    [ configuration H ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="attribute">location</span> <span class="regexp">~* /js/.*/\.js</span></div></pre></td></tr></table></figure></p><p>已=开头表示精确匹配<br>如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。<br>^~ 开头表示uri以某个常规字符串开头，不是正则匹配<br>~ 开头表示区分大小写的正则匹配;<br>~* 开头表示不区分大小写的正则匹配<br>/ 通用匹配, 如果没有其它匹配,任何请求都会匹配到<br>顺序 no优先级：<br>(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</p><p>上面的匹配结果<br>按照上面的location写法，以下的匹配示例成立：</p><p>/ -&gt; config A<br>精确完全匹配，即使/index.html也匹配不了<br>/downloads/download.html -&gt; config B<br>匹配B以后，往下没有任何匹配，采用B<br>/images/1.gif -&gt; configuration D<br>匹配到F，往下匹配到D，停止往下<br>/images/abc/def -&gt; config D<br>最长匹配到G，往下匹配D，停止往下<br>你可以看到 任何以/images/开头的都会匹配到D并停止，FG写在这里是没有任何意义的，H是永远轮不到的，这里只是为了说明匹配顺序<br>/documents/document.html -&gt; config C<br>匹配到C，往下没有任何匹配，采用C<br>/documents/1.jpg -&gt; configuration E<br>匹配到C，往下正则匹配到E<br>/documents/Abc.jpg -&gt; config CC<br>最长匹配到C，往下正则顺序匹配到CC，不会往下到E<br>实际使用建议<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">个人觉得至少有三个匹配规则定义，如下：</div><div class="line"><span class="comment">#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</span></div><div class="line"><span class="comment">#这里是直接转发给后端应用服务器了，也可以是一个静态首页</span></div><div class="line"><span class="comment"># 第一个必选规则</span></div><div class="line">location = / &#123;</div><div class="line">    proxy_pass http://tomcat:<span class="number">8080</span>/index</div><div class="line">&#125;</div><div class="line"><span class="comment"># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</span></div><div class="line"><span class="comment"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</span></div><div class="line">location ^~ /static/ &#123;</div><div class="line">    root /webroot/static/;</div><div class="line">&#125;</div><div class="line">location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ &#123;</div><div class="line">    root /webroot/res/;</div><div class="line">&#125;</div><div class="line"><span class="comment">#第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span></div><div class="line"><span class="comment">#非静态文件请求就默认是动态请求，自己根据实际把握</span></div><div class="line"><span class="comment">#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</span></div><div class="line">location / &#123;</div><div class="line">    proxy_pass http://tomcat:<span class="number">8080</span>/</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p><a href="http://tengine.taobao.org/book/chapter_02.html" target="_blank" rel="external">http://tengine.taobao.org/book/chapter_02.html</a><br><a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html" target="_blank" rel="external">http://nginx.org/en/docs/http/ngx_http_rewrite_module.html</a></p></blockquote><h2 id="2-Rewrite规则"><a href="#2-Rewrite规则" class="headerlink" title="2. Rewrite规则"></a>2. Rewrite规则</h2><p>rewrite功能就是，使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。rewrite只能放在server{},location{},if{}中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 <a href="http://seanlook.com/a/we/index.php?id=1&amp;u=str" target="_blank" rel="external">http://seanlook.com/a/we/index.php?id=1&amp;u=str</a> 只对/a/we/index.php重写。语法rewrite regex replacement [flag];</p><p>如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。</p><p>表明看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，它们的执行顺序是：</p><p>执行server块的rewrite指令<br>执行location匹配<br>执行选定的location中的rewrite指令<br>如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。</p><h3 id="2-1-flag标志位"><a href="#2-1-flag标志位" class="headerlink" title="2.1 flag标志位"></a>2.1 flag标志位</h3><p>last : 相当于Apache的[L]标记，表示完成rewrite<br>break : 停止执行当前虚拟主机的后续rewrite指令集<br>redirect : 返回302临时重定向，地址栏会显示跳转后的地址<br>permanent : 返回301永久重定向，地址栏会显示跳转后的地址<br>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：</p><p>last一般写在server和if中，而break一般使用在location中<br>last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配<br>break和last都能组织继续执行后面的rewrite指令</p><h3 id="2-2-if指令与全局变量"><a href="#2-2-if指令与全局变量" class="headerlink" title="2.2 if指令与全局变量"></a>2.2 if指令与全局变量</h3><p>if判断指令<br>语法为if(condition){…}，对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行，if条件(conditon)可以是如下任何内容：</p><p>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false<br>直接比较变量和内容时，使用=或!=<br>~正则表达式匹配，~*不区分大小写的匹配，!~区分大小写的不匹配<br>-f和!-f用来判断是否存在文件<br>-d和!-d用来判断是否存在目录<br>-e和!-e用来判断是否存在文件或目录<br>-x和!-x用来判断文件是否可执行</p><p>例如：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~ MSIE)</span> &#123;</div><div class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> /msie/<span class="variable">$1</span> <span class="literal">break</span>;</div><div class="line">&#125; //如果UA包含"MSIE"，rewrite请求到/msid/目录下</div><div class="line"></div><div class="line">if ($http_cookie ~* "id=([^;]+)(?:;|$)") &#123;</div><div class="line">    <span class="attribute">set</span> <span class="variable">$id</span> <span class="variable">$1</span>;</div><div class="line"> &#125; //如果cookie匹配正则，设置变量$id等于正则引用部分</div><div class="line"></div><div class="line"><span class="attribute">if</span> (<span class="variable">$request_method</span> = POST) &#123;</div><div class="line">    <span class="attribute">return</span> <span class="number">405</span>;</div><div class="line">&#125; //如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302</div><div class="line"></div><div class="line"><span class="attribute">if</span> (<span class="variable">$slow</span>) &#123;</div><div class="line">    <span class="attribute">limit_rate</span> <span class="number">10k</span>;</div><div class="line">&#125; //限速，$slow可以通过 set 指令设置</div><div class="line"></div><div class="line"><span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>)&#123;</div><div class="line">    break;</div><div class="line">    <span class="attribute">proxy_pass</span>  http://127.0.0.1;</div><div class="line">&#125; //如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查</div><div class="line"></div><div class="line"><span class="attribute">if</span> (<span class="variable">$args</span> <span class="regexp">~ post=140)</span>&#123;</div><div class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^</span> http://example.com/ <span class="literal">permanent</span>;</div><div class="line">&#125; //如果query string中包含"post=140"，永久重定向到example.com</div><div class="line"></div><div class="line"><span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|png|swf|flv)$</span> &#123;</div><div class="line">    <span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> www.jefflei.com www.leizhenfang.com;</div><div class="line">    <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>) &#123;</div><div class="line">        <span class="attribute">return</span> <span class="number">404</span>;</div><div class="line">    &#125; //防盗链</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>全局变量<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">下面是可以用作if判断的全局变量</div><div class="line">$args                    #请求中的参数值</div><div class="line">$query_string            #同 $args</div><div class="line">$arg_NAME                #GET请求中NAME的值</div><div class="line">$is_args                 #如果请求中有参数，值为"?"，否则为空字符串</div><div class="line">$uri                     #请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如"/foo/bar.html"。</div><div class="line">$document_uri            #同 $uri</div><div class="line">$document_root           #当前请求的文档根目录或别名</div><div class="line">$host                    #优先级：HTTP请求行的主机名&gt;"HOST"请求头字段&gt;符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称</div><div class="line">$hostname                #主机名</div><div class="line">$https                   #如果开启了SSL安全模式，值为"on"，否则为空字符串。</div><div class="line">$binary_remote_addr      #客户端地址的二进制形式，固定长度为4个字节</div><div class="line">$body_bytes_sent         #传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的"%B"参数保持兼容</div><div class="line">$bytes_sent              #传输给客户端的字节数</div><div class="line">$connection              #TCP连接的序列号</div><div class="line">$connection_requests     #TCP连接当前的请求数量</div><div class="line">$content_length          #"Content-Length" 请求头字段</div><div class="line">$content_type            #"Content-Type" 请求头字段</div><div class="line">$cookie_name             #cookie名称</div><div class="line">$limit_rate              #用于设置响应的速度限制</div><div class="line">$msec                    #当前的Unix时间戳</div><div class="line">$nginx_version           #nginx版本</div><div class="line">$pid                     #工作进程的PID</div><div class="line">$pipe                    #如果请求来自管道通信，值为"p"，否则为"."</div><div class="line">$proxy_protocol_addr     #获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串</div><div class="line">$realpath_root           #当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径</div><div class="line">$remote_addr             #客户端地址</div><div class="line">$remote_port             #客户端端口</div><div class="line">$remote_user             #用于HTTP基础认证服务的用户名</div><div class="line">$request                 #代表客户端的请求地址</div><div class="line">$request_body            #客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器</div><div class="line">$request_body_file       #将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off</div><div class="line">$request_completion      #如果请求成功，值为"OK"，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空</div><div class="line">$request_filename        #当前连接请求的文件路径，由root或alias指令与URI请求生成</div><div class="line">$request_length          #请求的长度 (包括请求的地址，http请求头和请求主体)</div><div class="line">$request_method          #HTTP请求方法，通常为"GET"或"POST"</div><div class="line">$request_time            #处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。</div><div class="line">$request_uri             #这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如："/cnphp/test.php?arg=freemouse"</div><div class="line">$scheme                  #请求使用的Web协议，"http" 或 "https"</div><div class="line">$server_addr             #服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中</div><div class="line">$server_name             #服务器名</div><div class="line">$server_port             #服务器端口</div><div class="line">$server_protocol         #服务器的HTTP版本，通常为 "HTTP/1.0" 或 "HTTP/1.1"</div><div class="line">$status                  #HTTP响应代码</div><div class="line">$time_iso8601            #服务器时间的ISO 8610格式</div><div class="line">$time_local              #服务器时间（LOG Format 格式）</div><div class="line">$cookie_NAME             #客户端请求Header头中的cookie变量，前缀"$cookie_"加上cookie名称的变量，该变量的值即为cookie名称的值</div><div class="line">$http_NAME               #匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头："Accept-Language"，$http_accept_language即可</div><div class="line">$http_cookie</div><div class="line">$http_host               #请求地址，即浏览器中你输入的地址（IP或域名）</div><div class="line">$http_referer            #url跳转来源,用来记录从那个页面链接访问过来的</div><div class="line">$http_user_agent         #用户终端浏览器等信息</div><div class="line">$http_x_forwarded_for</div><div class="line">$sent_http_NAME          #可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可</div><div class="line">$sent_http_cache_control</div><div class="line">$sent_http_connection</div><div class="line">$sent_http_content_type</div><div class="line">$sent_http_keep_alive</div><div class="line">$sent_http_last_modified</div><div class="line">$sent_http_location</div><div class="line">$sent_http_transfer_encoding</div><div class="line"></div><div class="line">例：http://localhost:88/test1/test2/test.php</div><div class="line">$host：localhost</div><div class="line">$server_port：88</div><div class="line">$request_uri：http://localhost:88/test1/test2/test.php</div><div class="line">$document_uri：/test1/test2/test.php</div><div class="line">$document_root：/var/www/html</div><div class="line">$request_filename：/var/www/html/test1/test2/test.php</div></pre></td></tr></table></figure></p><h3 id="2-3-常用正则"><a href="#2-3-常用正则" class="headerlink" title="2.3 常用正则"></a>2.3 常用正则</h3><p>. ： 匹配除换行符以外的任意字符<br>? ： 重复0次或1次<br>+ ： 重复1次或更多次<br>* ： 重复0次或更多次<br>\d ：匹配数字<br>^ ： 匹配字符串的开始<br>$ ： 匹配字符串的介绍<br>{n} ： 重复n次<br>{n,} ： 重复n次或更多次<br>[c] ： 匹配单个字符c<br>[a-z] ： 匹配a-z小写字母的任意一个<br>小括号()之间匹配的内容，可以在后面通过$1来引用，$2表示的是前面第二个()里的内容。正则里面容易让人困惑的是\转义特殊字符。</p><h3 id="2-4-rewrite实例"><a href="#2-4-rewrite实例" class="headerlink" title="2.4 rewrite实例"></a>2.4 rewrite实例</h3><p>例1：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="section">http</span> &#123;</div><div class="line">    <span class="comment"># 定义image日志格式</span></div><div class="line">    <span class="attribute">log_format</span> imagelog <span class="string">'[<span class="variable">$time_local</span>] '</span> <span class="variable">$image_file</span> <span class="string">' '</span> <span class="variable">$image_type</span> <span class="string">' '</span> <span class="variable">$body_bytes_sent</span> <span class="string">' '</span> <span class="variable">$status</span>;</div><div class="line">    <span class="comment"># 开启重写日志</span></div><div class="line">    <span class="attribute">rewrite_log</span> <span class="literal">on</span>;</div><div class="line"></div><div class="line">    <span class="section">server</span> &#123;</div><div class="line">        <span class="attribute">root</span> /home/www;</div><div class="line"></div><div class="line">        <span class="attribute">location</span> / &#123;</div><div class="line">                <span class="comment"># 重写规则信息</span></div><div class="line">                <span class="attribute">error_log</span> logs/rewrite.log <span class="literal">notice</span>;</div><div class="line">                <span class="comment"># 注意这里要用‘’单引号引起来，避免&#123;&#125;</span></div><div class="line">                <span class="attribute">rewrite</span> <span class="string">'^/images/([a-z]&#123;2&#125;)/([a-z0-9]&#123;5&#125;)/(.*)\.(png|jpg|gif)$'</span> /data?file=<span class="variable">$3</span>.<span class="variable">$4</span>;</div><div class="line">                <span class="comment"># 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行</span></div><div class="line">                <span class="attribute">set</span> <span class="variable">$image_file</span> <span class="variable">$3</span>;</div><div class="line">                <span class="attribute">set</span> <span class="variable">$image_type</span> <span class="variable">$4</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="attribute">location</span> /data &#123;</div><div class="line">                <span class="comment"># 指定针对图片的日志格式，来分析图片类型和大小</span></div><div class="line">                <span class="attribute">access_log</span> logs/images.log mian;</div><div class="line">                <span class="attribute">root</span> /data/images;</div><div class="line">                <span class="comment"># 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里</span></div><div class="line">                <span class="attribute">try_files</span> /<span class="variable">$arg_file</span> /image404.html;</div><div class="line">        &#125;</div><div class="line">        <span class="attribute">location</span> = /image404.html &#123;</div><div class="line">                <span class="comment"># 图片不存在返回特定的信息</span></div><div class="line">                <span class="attribute">return</span> <span class="number">404</span> <span class="string">"image not found\n"</span>;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>对形如/images/ef/uh7b3/test.png的请求，重写到/data?file=test.png，于是匹配到location /data，先看/data/images/test.png文件存不存在，如果存在则正常响应，如果不存在则重写tryfiles到新的image404 location，直接返回404状态码。</p><p>例2：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/images/(.*)_(\d+)x(\d+)\.(png|jpg|gif)$</span> /resizer/<span class="variable">$1</span>.<span class="variable">$4</span>?width=<span class="variable">$2</span>&amp;height=<span class="variable">$3</span>? <span class="literal">last</span>;</div></pre></td></tr></table></figure></p><p>对形如/images/bla_500x400.jpg的文件请求，重写到/resizer/bla.jpg?width=500&amp;height=400地址，并会继续尝试匹配location。</p><p>例3：<br>见 ssl部分页面加密 。</p><p>参考</p><blockquote><p><a href="http://www.nginx.cn/216.html" target="_blank" rel="external">http://www.nginx.cn/216.html</a><br><a href="http://www.ttlsa.com/nginx/nginx-rewriting-rules-guide/" target="_blank" rel="external">http://www.ttlsa.com/nginx/nginx-rewriting-rules-guide/</a><br>老僧系列nginx之rewrite规则快速上手<br><a href="http://fantefei.blog.51cto.com/2229719/919431" target="_blank" rel="external">http://fantefei.blog.51cto.com/2229719/919431</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-location正则写法&quot;&gt;&lt;a href=&quot;#1-location正则写法&quot; class=&quot;headerlink&quot; title=&quot;1. location正则写法&quot;&gt;&lt;/a&gt;1. location正则写法&lt;/h2&gt;&lt;p&gt;一个示例：&lt;br&gt;&lt;figure cla
      
    
    </summary>
    
      <category term="nginx" scheme="http://www.arnolix.com/categories/nginx/"/>
    
    
      <category term="nginx location rewrite" scheme="http://www.arnolix.com/tags/nginx-location-rewrite/"/>
    
  </entry>
  
  <entry>
    <title>创建TLS证书和秘钥</title>
    <link href="http://www.arnolix.com/2018/01/28/%E5%88%9B%E5%BB%BATLS%E8%AF%81%E4%B9%A6%E5%92%8C%E7%A7%98%E9%92%A5/"/>
    <id>http://www.arnolix.com/2018/01/28/创建TLS证书和秘钥/</id>
    <published>2018-01-28T12:18:26.335Z</published>
    <updated>2018-01-27T12:55:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建TLS证书和秘钥"><a href="#创建TLS证书和秘钥" class="headerlink" title="创建TLS证书和秘钥"></a>创建TLS证书和秘钥</h1><p><code>kubernetes</code>系统各组件需要使用<code>TLS</code>证书对通信进行加密，本文档使用<code>CloudFlare</code>的PKI工具集<a href="https://github.com/cloudflare/cfssl" target="_blank" rel="external">cfssl</a>来生成Certificate Authority(CA)证书和秘钥文件，CA 是自签名的证书，用来签名后续创建的其它TLS证书。</p><h2 id="安装-CFSSL"><a href="#安装-CFSSL" class="headerlink" title="安装 CFSSL"></a>安装 <code>CFSSL</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -O /usr/local/bin/cfssl</span></div><div class="line"><span class="comment"># wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -O /usr/local/bin/cfssljson</span></div><div class="line"><span class="comment"># wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64 -O /usr/local/bin/cfssl-certinfo</span></div><div class="line"><span class="comment"># chmod +x /usr/local/bin/cfssl*</span></div></pre></td></tr></table></figure><h2 id="创建CA-Certificate-Authority"><a href="#创建CA-Certificate-Authority" class="headerlink" title="创建CA(Certificate Authority)"></a>创建CA(Certificate Authority)</h2><p>创建CA配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cfssl print-defaults config &gt; ca-config.json</span></div><div class="line"><span class="comment"># cat ca-config.json</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"signing"</span>: &#123;</div><div class="line">    <span class="string">"default"</span>: &#123;</div><div class="line">      <span class="string">"expiry"</span>: <span class="string">"87600h"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"profiles"</span>: &#123;</div><div class="line">      <span class="string">"kubernetes"</span>: &#123;</div><div class="line">        <span class="string">"usages"</span>: [</div><div class="line">            <span class="string">"signing"</span>,</div><div class="line">            <span class="string">"key encipherment"</span>,</div><div class="line">            <span class="string">"server auth"</span>,</div><div class="line">            <span class="string">"client auth"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"expiry"</span>: <span class="string">"87600h"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建CA证书签名请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cfssl print-defaults csr &gt; ca-csr.json </span></div><div class="line"><span class="comment"># cat ca-csr.json </span></div><div class="line">&#123;</div><div class="line">  <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</div><div class="line">  <span class="string">"key"</span>: &#123;</div><div class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</div><div class="line">    <span class="string">"size"</span>: 2048</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"names"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</div><div class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</div><div class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line"><span class="comment"># cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span></div></pre></td></tr></table></figure><h2 id="创建kube-apiserver证书"><a href="#创建kube-apiserver证书" class="headerlink" title="创建kube-apiserver证书"></a>创建kube-apiserver证书</h2><p>创建kube-apiserver证书签名请求</p><p>注意：默认kube-apiserver证书没有权限访问API接口, 会提示: Unauthorized</p><p>注意：如果kube-apiserver证书访问API接口, 需要设置: [“O”: “system:masters”]</p><p>注意：此处需要将dns ip(首个IP地址)、etcd、k8s-master节点的ip全部加上.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cfssl print-defaults csr &gt; kubernetes-csr.json</span></div><div class="line"><span class="comment"># cat kube-apiserver-csr.json </span></div><div class="line">&#123;</div><div class="line">    <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</div><div class="line">    <span class="string">"hosts"</span>: [</div><div class="line">      <span class="string">"127.0.0.1"</span>,</div><div class="line">      <span class="string">"172.21.0.1"</span>,</div><div class="line">      <span class="string">"172.16.30.171"</span>,</div><div class="line">      <span class="string">"172.16.30.172"</span>,</div><div class="line">      <span class="string">"172.16.30.173"</span>,</div><div class="line">      <span class="string">"kubernetes"</span>,</div><div class="line">      <span class="string">"kubernetes.default"</span>,</div><div class="line">      <span class="string">"kubernetes.default.svc"</span>,</div><div class="line">      <span class="string">"kubernetes.default.svc.cluster"</span>,</div><div class="line">      <span class="string">"kubernetes.default.svc.cluster.local"</span></div><div class="line">    ],</div><div class="line">    <span class="string">"key"</span>: &#123;</div><div class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</div><div class="line">        <span class="string">"size"</span>: 2048</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"names"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</div><div class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">            <span class="string">"O"</span>: <span class="string">"k8s"</span>,</div><div class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line">``` </div><div class="line"></div><div class="line">生成kubernetes证书和私钥</div><div class="line"></div><div class="line">``` bash</div><div class="line"><span class="comment"># cfssl gencert -ca=ca.pem \</span></div><div class="line">                -ca-key=ca-key.pem \</div><div class="line">                -config=ca-config.json \</div><div class="line">                -profile=kubernetes kube-apiserver-csr.json | cfssljson -bare kube-apiserver</div></pre></td></tr></table></figure><h2 id="创建kube-controller-manager证书"><a href="#创建kube-controller-manager证书" class="headerlink" title="创建kube-controller-manager证书"></a>创建kube-controller-manager证书</h2><p>创建kube-controller-manager证书签名请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cfssl print-defaults csr &gt; kube-controller-manager-csr.json </span></div><div class="line"><span class="comment"># cat kube-controller-manager-csr.json </span></div><div class="line">&#123;</div><div class="line">  <span class="string">"CN"</span>: <span class="string">"system:kube-controller-manager"</span>,</div><div class="line">  <span class="string">"hosts"</span>: [],</div><div class="line">  <span class="string">"key"</span>: &#123;</div><div class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</div><div class="line">    <span class="string">"size"</span>: 2048</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"names"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</div><div class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"O"</span>: <span class="string">"system:kube-controller-manager"</span>,</div><div class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line">``` </div><div class="line">生成kube-controller-manager证书和私钥</div><div class="line"></div><div class="line">``` bash</div><div class="line"><span class="comment"># cfssl gencert -ca=ca.pem \</span></div><div class="line">                -ca-key=ca-key.pem \</div><div class="line">                -config=ca-config.json \</div><div class="line">                -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager</div></pre></td></tr></table></figure><h2 id="创建kube-scheduler证书"><a href="#创建kube-scheduler证书" class="headerlink" title="创建kube-scheduler证书"></a>创建kube-scheduler证书</h2><p>创建kube-scheduler证书签名请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cfssl print-defaults csr &gt; admin-csr.json </span></div><div class="line"><span class="comment"># cat kube-scheduler-csr.json </span></div><div class="line">&#123;</div><div class="line">  <span class="string">"CN"</span>: <span class="string">"system:kube-scheduler"</span>,</div><div class="line">  <span class="string">"hosts"</span>: [],</div><div class="line">  <span class="string">"key"</span>: &#123;</div><div class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</div><div class="line">    <span class="string">"size"</span>: 2048</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"names"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</div><div class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"O"</span>: <span class="string">"system:kube-scheduler"</span>,</div><div class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>生成kube-scheduler证书和私钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cfssl gencert -ca=ca.pem \</span></div><div class="line">                -ca-key=ca-key.pem \</div><div class="line">                -config=ca-config.json \</div><div class="line">                -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler</div></pre></td></tr></table></figure><h2 id="创建kubelet证书"><a href="#创建kubelet证书" class="headerlink" title="创建kubelet证书"></a>创建kubelet证书</h2><p>创建kubelet证书签名请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cat &gt; kubelet-csr.json &lt;&lt; EOF</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"CN"</span>: <span class="string">"kubelet"</span>,</div><div class="line">  <span class="string">"hosts"</span>: [],</div><div class="line">  <span class="string">"key"</span>: &#123;</div><div class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</div><div class="line">    <span class="string">"size"</span>: 2048</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"names"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</div><div class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"O"</span>: <span class="string">"system:masters"</span>,</div><div class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line">EOF</div></pre></td></tr></table></figure><p>生成kubelet证书和私钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cfssl gencert -ca=ca.pem \</div><div class="line">              -ca-key=ca-key.pem \</div><div class="line">              -config=ca-config.json \</div><div class="line">              -profile=kubernetes kubelet-csr.json | cfssljson -bare kubelet</div></pre></td></tr></table></figure><h2 id="创建kube-proxy证书"><a href="#创建kube-proxy证书" class="headerlink" title="创建kube-proxy证书"></a>创建kube-proxy证书</h2><p>创建kube-proxy证书签名请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cfssl print-defaults csr &gt; kube-proxy-csr.json</span></div><div class="line"><span class="comment"># cat kube-proxy-csr.json</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"CN"</span>: <span class="string">"system:kube-proxy"</span>,</div><div class="line">  <span class="string">"hosts"</span>: [],</div><div class="line">  <span class="string">"key"</span>: &#123;</div><div class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</div><div class="line">    <span class="string">"size"</span>: 2048</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"names"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</div><div class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"O"</span>: <span class="string">"system:node-proxier"</span>,</div><div class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>生成kube-proxy客户端证书和私钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cfssl gencert -ca=ca.pem \</span></div><div class="line">                -ca-key=ca-key.pem \</div><div class="line">                -config=ca-config.json \</div><div class="line">                -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy</div></pre></td></tr></table></figure><h2 id="证书校验"><a href="#证书校验" class="headerlink" title="证书校验"></a>证书校验</h2><p>校验kube-apiserver证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cfssl-certinfo -cert kube-apiserver.pem</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"subject"</span>: &#123;</div><div class="line">    <span class="string">"common_name"</span>: <span class="string">"kubernetes"</span>,</div><div class="line">    <span class="string">"country"</span>: <span class="string">"CN"</span>,</div><div class="line">    <span class="string">"organization"</span>: <span class="string">"system:masters"</span>,</div><div class="line">    <span class="string">"organizational_unit"</span>: <span class="string">"System"</span>,</div><div class="line">    <span class="string">"locality"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">    <span class="string">"province"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">    <span class="string">"names"</span>: [</div><div class="line">      <span class="string">"CN"</span>,</div><div class="line">      <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"system:masters"</span>,</div><div class="line">      <span class="string">"System"</span>,</div><div class="line">      <span class="string">"kubernetes"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"issuer"</span>: &#123;</div><div class="line">    <span class="string">"common_name"</span>: <span class="string">"kubernetes"</span>,</div><div class="line">    <span class="string">"country"</span>: <span class="string">"CN"</span>,</div><div class="line">    <span class="string">"organization"</span>: <span class="string">"k8s"</span>,</div><div class="line">    <span class="string">"organizational_unit"</span>: <span class="string">"System"</span>,</div><div class="line">    <span class="string">"locality"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">    <span class="string">"province"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">    <span class="string">"names"</span>: [</div><div class="line">      <span class="string">"CN"</span>,</div><div class="line">      <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"k8s"</span>,</div><div class="line">      <span class="string">"System"</span>,</div><div class="line">      <span class="string">"kubernetes"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"serial_number"</span>: <span class="string">"533666226632105718421042600083075622217402341392"</span>,</div><div class="line">  <span class="string">"sans"</span>: [</div><div class="line">    <span class="string">"kubernetes"</span>,</div><div class="line">    <span class="string">"kubernetes.default"</span>,</div><div class="line">    <span class="string">"kubernetes.default.svc"</span>,</div><div class="line">    <span class="string">"kubernetes.default.svc.cluster"</span>,</div><div class="line">    <span class="string">"kubernetes.default.svc.cluster.local"</span>,</div><div class="line">    <span class="string">"127.0.0.1"</span>,</div><div class="line">    <span class="string">"172.21.0.1"</span>,</div><div class="line">    <span class="string">"172.16.30.171"</span>,</div><div class="line">    <span class="string">"172.16.30.172"</span>,</div><div class="line">    <span class="string">"172.16.30.173"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"not_before"</span>: <span class="string">"2017-07-31T08:57:00Z"</span>,</div><div class="line">  <span class="string">"not_after"</span>: <span class="string">"2018-07-31T08:57:00Z"</span>,</div><div class="line">  <span class="string">"sigalg"</span>: <span class="string">"SHA256WithRSA"</span>,</div><div class="line">  <span class="string">"authority_key_id"</span>: <span class="string">"6B:68:CF:57:62:6B:60:7E:F3:2C:AC:1A:20:6F:27:6A:EA:84:98:A8"</span>,</div><div class="line">  <span class="string">"subject_key_id"</span>: <span class="string">"3C:6C:67:14:69:F8:42:2A:5C:3C:28:65:B6:A3:95:80:49:A6:6:C"</span>,</div><div class="line">  <span class="string">"pem"</span>: <span class="string">"-----BEGIN CERTIFICATE-----</span></div><div class="line"><span class="string">MIIEkDCCA3igAwIBAgIUEdNzDqRQMswGL4KikzjnizkfBS4wDQYJKoZIhvcNAQEL</span></div><div class="line"><span class="string">BQAwZTELMAkGA1UEBhMCQ04xEDAOBgNVBAgTB0JlaUppbmcxEDAOBgNVBAcTB0Jl</span></div><div class="line"><span class="string">aUppbmcxDDAKBgNVBAoTA2s4czEPMA0GA1UECxMGU3lzdGVtMRMwEQYDVQQDEwpr</span></div><div class="line"><span class="string">dWJlcm5ldGVzMB4XDTE3MDcyNzA5MjcwMFoXDTE4MDcyNzA5MjcwMFowcDELMAkG</span></div><div class="line"><span class="string">A1UEBhMCQ04xEDAOBgNVBAgTB0JlaUppbmcxEDAOBgNVBAcTB0JlaUppbmcxFzAV</span></div><div class="line"><span class="string">BgNVBAoTDnN5c3RlbTptYXN0ZXJzMQ8wDQYDVQQLEwZTeXN0ZW0xEzARBgNVBAMT</span></div><div class="line"><span class="string">Cmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClXFE1</span></div><div class="line"><span class="string">qVQ9HiHDEbyfDMqsrO8p0Rn02ta+xWAbmJhwgNstFfuW0Lz9XmtpclDRfF2U5QOJ</span></div><div class="line"><span class="string">X7TrTZz2xhjRxXzUb/4EU035VH273tb+3+orUbggMcUzavpbm0zFqqSeSTxIoWhw</span></div><div class="line"><span class="string">wiIUG33BR7i6kvyH7eHraq/vYn8NbG2t8ufoJFgPys6zjC9rDWqNlBXume69n8BD</span></div><div class="line"><span class="string">HTfDQUgUVLZDDZyef+KwvtziHUtEgEakaI9MgDV3CdkMAvXrnIeiMHQzRBen3gli</span></div><div class="line"><span class="string">zk4i+OCWd9oI7cB7oqvXUm+pTEAzOPQaGkkq7A2R8UHTFgOyAkw8saKwRvBacWhm</span></div><div class="line"><span class="string">BDa/+CVYKfiNBzDRAgMBAAGjggErMIIBJzAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0l</span></div><div class="line"><span class="string">BBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYE</span></div><div class="line"><span class="string">FHfVB5vi0gEh2rGjBzWVr9+2Jrs9MB8GA1UdIwQYMBaAFGHhP32/2ThF4VlOuaKj</span></div><div class="line"><span class="string">iKbG/CMcMIGnBgNVHREEgZ8wgZyCCmt1YmVybmV0ZXOCEmt1YmVybmV0ZXMuZGVm</span></div><div class="line"><span class="string">YXVsdIIWa3ViZXJuZXRlcy5kZWZhdWx0LnN2Y4Iea3ViZXJuZXRlcy5kZWZhdWx0</span></div><div class="line"><span class="string">LnN2Yy5jbHVzdGVygiRrdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9j</span></div><div class="line"><span class="string">YWyHBH8AAAGHBAr+AAGHBMCoA1+HBMCoA2CHBMCoA2MwDQYJKoZIhvcNAQELBQAD</span></div><div class="line"><span class="string">ggEBABlTNX+MVTfViozPrwH6QkXfbHTH9kpsm9SPZhpzjON4pAcY5kP3t6DInX9D</span></div><div class="line"><span class="string">SdivyuVn3jJz6BaBIoUh5RJRsq6ArMpbl1g7dyZnHZXPjLtMAFYGgnBjH6XVEQ1f</span></div><div class="line"><span class="string">FZbSZjvbti/l7SH7f9aqtywzqNCDqmwx+2gNoWwd11y0A7zxMVK28l6apbMfcVHL</span></div><div class="line"><span class="string">rHLKikoV+sLmvKCLdh7/qrTToono0j5nMzuQWfNU3UsNHOZZ1uNUQsuurv95LUWG</span></div><div class="line"><span class="string">5t3PKpRoi0Z5kePBdLoD1CHqS1DEPkZt+sj6e6vqQSBAM8usNEUwi7ASOY2zAaMG</span></div><div class="line"><span class="string">aDz1i4/WZhJSUQyDfx7HzJpAmBE=</span></div><div class="line"><span class="string">-----END CERTIFICATE-----"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="分发证书"><a href="#分发证书" class="headerlink" title="分发证书"></a>分发证书</h2><p>将<code>TLS</code>证书拷贝到<code>Kubernetes Master</code>和<code>Kubernetes node</code>的配置目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mkdir -p /etc/kubernetes/ssl &amp;&amp; cp /tmp/ssl/*.pem /etc/kubernetes/ssl</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;创建TLS证书和秘钥&quot;&gt;&lt;a href=&quot;#创建TLS证书和秘钥&quot; class=&quot;headerlink&quot; title=&quot;创建TLS证书和秘钥&quot;&gt;&lt;/a&gt;创建TLS证书和秘钥&lt;/h1&gt;&lt;p&gt;&lt;code&gt;kubernetes&lt;/code&gt;系统各组件需要使用&lt;code&gt;
      
    
    </summary>
    
      <category term="kubernetes" scheme="http://www.arnolix.com/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="http://www.arnolix.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>搭建flannel服务</title>
    <link href="http://www.arnolix.com/2018/01/28/%E6%90%AD%E5%BB%BAflannel%E6%9C%8D%E5%8A%A1/"/>
    <id>http://www.arnolix.com/2018/01/28/搭建flannel服务/</id>
    <published>2018-01-28T12:18:26.335Z</published>
    <updated>2018-01-27T12:56:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建Flannel服务"><a href="#搭建Flannel服务" class="headerlink" title="搭建Flannel服务"></a>搭建Flannel服务</h1><h2 id="什么是Flannel？"><a href="#什么是Flannel？" class="headerlink" title="什么是Flannel？"></a>什么是Flannel？</h2><p><code>Flannel</code>是<code>CoreOS</code>团队针对<code>Kubernetes</code>设计的一个覆盖网络(Overlay Network)工具，其目的在于帮助每一个使用<code>Kuberentes</code>的<code>CoreOS</code>主机拥有一个完整的子网。</p><h2 id="Flannel工作原理"><a href="#Flannel工作原理" class="headerlink" title="Flannel工作原理"></a>Flannel工作原理</h2><p><code>flannel</code>为全部的容器使用一个<code>network</code>，然后在每个<code>host</code>上从<code>network</code>中划分一个子网<code>subnet</code>。<code>host</code>上的容器创建网络时，从<code>subnet</code>中划分一个ip给容器。<code>flannel</code>不存在所谓的控制节点，而是每个<code>host</code>上的<code>flanneld</code>从一个etcd中获取相关数据，然后声明自己的子网网段，并记录在etcd中。如果有<code>host</code>对数据转发时，从<code>etcd</code>中查询到该子网所在的<code>host</code>的<code>ip</code>，然后将数据发往对应<code>host</code>上的<code>flanneld</code>，交由其进行转发。</p><h2 id="Flannel架构介绍"><a href="#Flannel架构介绍" class="headerlink" title="Flannel架构介绍"></a>Flannel架构介绍</h2><p><img src="https://github.com/coreos/flannel/blob/master/packet-01.png" alt=""></p><h2 id="创建Pod-Network"><a href="#创建Pod-Network" class="headerlink" title="创建Pod Network"></a>创建Pod Network</h2><p>注意：flanneld v0.9.0版本目前不支持etcd v3, 使用etcd v2 API写入配置key和网段数据</p><p>注意：集群网段地址<code>172.20.0.0/16</code>, SVC(DNS)网段地址<code>172.21.0.0/16</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># etcdctl set /flannel/network/config '&#123; "Network": "172.20.0.0/16", "Backend": &#123; "Type": "host-gw" &#125; &#125;'</span></div></pre></td></tr></table></figure><h2 id="安装flannel服务"><a href="#安装flannel服务" class="headerlink" title="安装flannel服务"></a>安装flannel服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># yum -y install flannel</span></div><div class="line"><span class="comment"># vim /etc/sysconfig/flanneld</span></div><div class="line"><span class="comment"># Flanneld configuration options  </span></div><div class="line"> </div><div class="line"><span class="comment"># etcd url location.  Point this to the server where etcd runs</span></div><div class="line">FLANNEL_ETCD_ENDPOINTS=<span class="string">"http://172.16.30.171:2379,http://172.16.30.172:2379,http://172.16.30.173:2379"</span></div><div class="line"> </div><div class="line"><span class="comment"># etcd config key.  This is the configuration key that flannel queries</span></div><div class="line"><span class="comment"># For address range assignment</span></div><div class="line">FLANNEL_ETCD_PREFIX=<span class="string">"/flannel/network"</span></div><div class="line"> </div><div class="line"><span class="comment"># Any additional options that you want to pass</span></div><div class="line">FLANNEL_OPTIONS=<span class="string">"-iface=eth0 -ip-masq"</span></div><div class="line"></div><div class="line"><span class="comment"># systemctl enable flanneld &amp;&amp; systemctl restart flanneld &amp;&amp; systemctl status flanneld</span></div></pre></td></tr></table></figure><h2 id="配置docker启动服务"><a href="#配置docker启动服务" class="headerlink" title="配置docker启动服务"></a>配置docker启动服务</h2><p>注意：flannel服务要优先启动，docker服务启动脚本没有配置flannel服务优先级。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim/usr/lib/systemd/system/docker.service</span></div><div class="line">[Unit]</div><div class="line">Description=Docker Application Container Engine</div><div class="line">Documentation=http://docs.docker.com</div><div class="line">After=network.target</div><div class="line">After=flanneld.service</div><div class="line">Wants=docker-storage-setup.service</div><div class="line">Requires=docker-cleanup.timer</div><div class="line"></div><div class="line">[Service]</div><div class="line">Type=notify</div><div class="line">NotifyAccess=all</div><div class="line">KillMode=process</div><div class="line">EnvironmentFile=-/etc/sysconfig/docker</div><div class="line">EnvironmentFile=-/etc/sysconfig/docker-storage</div><div class="line">EnvironmentFile=-/etc/sysconfig/docker-network</div><div class="line">Environment=GOTRACEBACK=crash</div><div class="line">Environment=DOCKER_HTTP_HOST_COMPAT=1</div><div class="line">Environment=PATH=/usr/libexec/docker:/usr/bin:/usr/sbin</div><div class="line">ExecStart=/usr/bin/dockerd-current \</div><div class="line">          --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current \</div><div class="line">          --default-runtime=docker-runc \</div><div class="line">          --<span class="built_in">exec</span>-opt native.cgroupdriver=systemd \</div><div class="line">          --userland-proxy-path=/usr/libexec/docker/docker-proxy-current \</div><div class="line">          <span class="variable">$OPTIONS</span> \</div><div class="line">          <span class="variable">$DOCKER_STORAGE_OPTIONS</span> \</div><div class="line">          <span class="variable">$DOCKER_NETWORK_OPTIONS</span> \</div><div class="line">          <span class="variable">$ADD_REGISTRY</span> \</div><div class="line">          <span class="variable">$BLOCK_REGISTRY</span> \</div><div class="line">          <span class="variable">$INSECURE_REGISTRY</span></div><div class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></div><div class="line">LimitNOFILE=1048576</div><div class="line">LimitNPROC=1048576</div><div class="line">LimitCORE=infinity</div><div class="line">TimeoutStartSec=0</div><div class="line">Restart=on-abnormal</div><div class="line">MountFlags=slave</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div><div class="line"></div><div class="line"><span class="comment"># systemctl enable docker &amp;&amp; systemctl restart docker &amp;&amp; systemctl status docker</span></div></pre></td></tr></table></figure><h2 id="验证docker服务获取IP是否正常"><a href="#验证docker服务获取IP是否正常" class="headerlink" title="验证docker服务获取IP是否正常"></a>验证docker服务获取IP是否正常</h2><p>注意：<code>yum</code>方式安装flannel，docker无需做任何配置的；如果docker服务没有正确获取IP，请检查flannel服务是否正常启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ifconfig docker0</span></div><div class="line">docker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</div><div class="line">        inet 172.16.36.1  netmask 255.255.255.0  broadcast 0.0.0.0</div><div class="line">        ether 02:42:d0:0b:23:be  txqueuelen 0  (Ethernet)</div><div class="line">        RX packets 39657261  bytes 7409081483 (6.9 GiB)</div><div class="line">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class="line">        TX packets 40524935  bytes 23758435104 (22.1 GiB)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建Flannel服务&quot;&gt;&lt;a href=&quot;#搭建Flannel服务&quot; class=&quot;headerlink&quot; title=&quot;搭建Flannel服务&quot;&gt;&lt;/a&gt;搭建Flannel服务&lt;/h1&gt;&lt;h2 id=&quot;什么是Flannel？&quot;&gt;&lt;a href=&quot;#什么是Fla
      
    
    </summary>
    
      <category term="kubernetes" scheme="http://www.arnolix.com/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="http://www.arnolix.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 安装简介</title>
    <link href="http://www.arnolix.com/2018/01/28/hexo%E5%AE%89%E8%A3%85%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.arnolix.com/2018/01/28/hexo安装简介/</id>
    <published>2018-01-28T12:18:26.335Z</published>
    <updated>2017-10-04T04:53:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建etcd集群服务</title>
    <link href="http://www.arnolix.com/2018/01/28/%E6%90%AD%E5%BB%BAetcd%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1/"/>
    <id>http://www.arnolix.com/2018/01/28/搭建etcd集群服务/</id>
    <published>2018-01-28T12:18:26.335Z</published>
    <updated>2018-01-27T12:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建etcd集群服务"><a href="#搭建etcd集群服务" class="headerlink" title="搭建etcd集群服务"></a>搭建etcd集群服务</h1><h2 id="Etcd服务应用场景"><a href="#Etcd服务应用场景" class="headerlink" title="Etcd服务应用场景"></a>Etcd服务应用场景</h2><p>要问<code>etcd</code>是什么？很多人第一反应可能是一个键值存储仓库，却没有重视官方定义的后半句，用于配置共享和服务发现。<code>etcd</code>作为一个受到<code>ZooKeeper</code>与<code>doozer</code>启发而催生的项目，除了拥有与之类似的功能外，更专注于以下四点:</p><ul><li>简单：基于HTTP+JSON的API让你用curl就可以轻松使用。</li><li>安全：可选SSL客户认证机制。</li><li>快速：每个实例每秒支持一千次写操作。</li><li>可信：使用Raft算法充分实现了分布式。</li></ul><p>分布式系统中的数据分为控制数据和应用数据。etcd的使用场景默认处理的数据都是控制数据，对于应用数据，只推荐数据量很小，但是更新访问频繁的情况。应用场景有如下几类: </p><ul><li>场景一：服务发现（Service Discovery）</li><li>场景二：消息发布与订阅</li><li>场景三：负载均衡</li><li>场景四：分布式通知与协调</li><li>场景五：分布式锁、分布式队列</li><li>场景六：集群监控与Leader竞选</li></ul><p>举个最简单的例子，如果你需要一个分布式存储仓库来存储配置信息，并且希望这个仓库读写速度快、支持高可用、部署简单、支持http接口，那么就可以使用etcd。</p><h2 id="安装配置etcd服务"><a href="#安装配置etcd服务" class="headerlink" title="安装配置etcd服务"></a>安装配置etcd服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># yum -y install etcd</span></div><div class="line"><span class="comment"># cp /etc/etcd/etcd.conf /etc/etcd/etcd.conf.bak_$(date +%Y%m%d)</span></div><div class="line"><span class="comment"># vim /etc/etcd/etcd.conf</span></div><div class="line">ETCD_NAME=etcd_node1  // 节点名称</div><div class="line">ETCD_DATA_DIR=<span class="string">"/var/lib/etcd/default.etcd"</span></div><div class="line">ETCD_LISTEN_PEER_URLS=<span class="string">"http://172.16.30.171:2380"</span></div><div class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"http://172.16.30.171:2379,http://127.0.0.1:2379"</span>  // 必须增加127.0.0.1否则启动会报错</div><div class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">"http://172.16.30.171:2380"</span></div><div class="line">ETCD_INITIAL_CLUSTER=<span class="string">"etcd_node1=http://172.16.30.171:2380,etcd_node2=http://172.16.30.172:2380,etcd_node3=http://172.16.30.173:2380"</span>  // 集群IP地址</div><div class="line">ETCD_INITIAL_CLUSTER_STATE=<span class="string">"new"</span>  // 初始化集群,第二次启动时将状态改为: <span class="string">"existing"</span></div><div class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">"etcd-cluster"</span></div><div class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">"http://172.16.30.171:2379"</span></div><div class="line"><span class="comment"># systemctl enable etcd.service </span></div><div class="line"><span class="comment"># systemctl start etcd.service &amp;&amp; systemctl status etcd.service</span></div></pre></td></tr></table></figure><p>设置API版本 默认版本：v2 [根据实际情况设定]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># echo 'export ETCDCTL_API=3' &gt;&gt; /etc/profile</span></div><div class="line"><span class="comment"># . /etc/profile</span></div></pre></td></tr></table></figure><h2 id="查看和验证etcd集群服务状态"><a href="#查看和验证etcd集群服务状态" class="headerlink" title="查看和验证etcd集群服务状态"></a>查看和验证etcd集群服务状态</h2><p>查看etcd集群成员</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># etcdctl member list</span></div><div class="line">7e218077496bccf9: name=etcd_node1 peerURLs=http://172.16.30.171:2380 clientURLs=http://172.16.30.171:2379 isLeader=<span class="literal">true</span></div><div class="line">92f1b7c038a4300a: name=etcd_node2 peerURLs=http://172.16.30.172:2380 clientURLs=http://172.16.30.172:2379 isLeader=<span class="literal">false</span></div><div class="line">c8611e11b142e510: name=etcd_node3 peerURLs=http://172.16.30.173:2380 clientURLs=http://172.16.30.173:2379 isLeader=<span class="literal">false</span></div></pre></td></tr></table></figure><p>验证etcd集群状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># etcdctl cluster-health</span></div><div class="line">member 7e218077496bccf9 is healthy: got healthy result from http://172.16.30.171:2379</div><div class="line">member 92f1b7c038a4300a is healthy: got healthy result from http://172.16.30.172:2379</div><div class="line">member c8611e11b142e510 is healthy: got healthy result from http://172.16.30.173:2379</div><div class="line">cluster is healthy //表示安装成功</div></pre></td></tr></table></figure><h2 id="etcd集群增加节点"><a href="#etcd集群增加节点" class="headerlink" title="etcd集群增加节点"></a>etcd集群增加节点</h2><p>将目标节点添加到etcd集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># etcdctl member add etcd_node4 http://172.16.30.174:2380</span></div><div class="line">Added member named etcd_etcd4 with ID 5282b16e923af92f to cluster</div><div class="line"> </div><div class="line">ETCD_NAME=<span class="string">"etcd_node4"</span></div><div class="line">ETCD_INITIAL_CLUSTER=<span class="string">"etcd_node4=http://172.16.30.174:2380,etcd_node1=http://172.16.30.171:2380,etcd_node2=http://172.16.30.172:2380,etcd_node3=http://172.16.30.173:2380"</span></div><div class="line">ETCD_INITIAL_CLUSTER_STATE=<span class="string">"existing"</span></div></pre></td></tr></table></figure><p>查看成员列表. etcd_node4节点状态为: unstarted </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># etcdctl member list</span></div><div class="line">5282b16e923af92f[unstarted]: peerURLs=http://172.16.30.174:2380</div><div class="line">7e218077496bccf9: name=etcd_node1 peerURLs=http://172.16.30.171:2380 clientURLs=http://172.16.30.171:2379 isLeader=<span class="literal">true</span></div><div class="line">92f1b7c038a4300a: name=etcd_node2 peerURLs=http://172.16.30.172:2380 clientURLs=http://172.16.30.172:2379 isLeader=<span class="literal">false</span></div><div class="line">c8611e11b142e510: name=etcd_node3 peerURLs=http://172.16.30.173:2380 clientURLs=http://172.16.30.173:2379 isLeader=<span class="literal">false</span></div></pre></td></tr></table></figure><p>配置etcd_node4节点的etcd.conf文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim /etc/etcd/etcd.conf</span></div><div class="line">ETCD_NAME=<span class="string">"etcd_node4"</span> // 节点名称,对应etcd添加节点命令时输出的信息</div><div class="line">ETCD_DATA_DIR=<span class="string">"/var/lib/etcd/etcd_node4.etcd"</span></div><div class="line">ETCD_LISTEN_PEER_URLS=<span class="string">"http://172.16.30.174:2380"</span></div><div class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"http://172.16.30.174:2379,http://127.0.0.1:2379"</span></div><div class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">"http://172.16.30.174:2380"</span></div><div class="line">ETCD_INITIAL_CLUSTER=<span class="string">"etcd_node4=http://172.16.30.174:2380,etcd_node1=http://172.16.30.171:2380,etcd_node2=http://172.16.30.171:2380,etcd_node3=http://172.16.30.173:2380"</span> // 集群列表,对应etcd添加节点命令时输出的信息</div><div class="line">ETCD_INITIAL_CLUSTER_STATE=<span class="string">"existing"</span> // 集群状态,对应etcd添加节点命令时输出的信息</div><div class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">"etcd-cluster"</span></div><div class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">"http://172.16.30.174:2379"</span></div><div class="line"><span class="comment"># systemctl enable etcd.service </span></div><div class="line"><span class="comment"># systemctl start etcd.service &amp;&amp; systemctl status etcd.service</span></div></pre></td></tr></table></figure><p>再次查看成员列表. etcd_etcd4节点状态已经显示正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># etcdctl member list</span></div><div class="line">5282b16e923af92f: name=etcd_node4 peerURLs=http://172.16.30.174:2380 clientURLs=http://172.16.30.174:2379 isLeader=<span class="literal">false</span></div><div class="line">7e218077496bccf9: name=etcd_node1 peerURLs=http://172.16.30.171:2380 clientURLs=http://172.16.30.171:2379 isLeader=<span class="literal">true</span></div><div class="line">92f1b7c038a4300a: name=etcd_node2 peerURLs=http://172.16.30.172:2380 clientURLs=http://172.16.30.172:2379 isLeader=<span class="literal">false</span></div><div class="line">c8611e11b142e510: name=etcd_node3 peerURLs=http://172.16.30.173:2380 clientURLs=http://172.16.30.173:2379 isLeader=<span class="literal">false</span></div></pre></td></tr></table></figure><h2 id="etcd集群删除节点"><a href="#etcd集群删除节点" class="headerlink" title="etcd集群删除节点"></a>etcd集群删除节点</h2><p>删除etcd_etcd4节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># etcdctl member remove 5282b16e923af92f</span></div><div class="line">Removed member 5282b16e923af92f from cluster</div><div class="line"><span class="comment"># etcdctl member list</span></div><div class="line">7e218077496bccf9: name=etcd_node1 peerURLs=http://172.16.30.171:2380 clientURLs=http://172.16.30.171:2379 isLeader=<span class="literal">true</span></div><div class="line">92f1b7c038a4300a: name=etcd_node2 peerURLs=http://172.16.30.172:2380 clientURLs=http://172.16.30.172:2379 isLeader=<span class="literal">false</span></div><div class="line">c8611e11b142e510: name=etcd_node3 peerURLs=http://172.16.30.173:2380 clientURLs=http://172.16.30.173:2379 isLeader=<span class="literal">false</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建etcd集群服务&quot;&gt;&lt;a href=&quot;#搭建etcd集群服务&quot; class=&quot;headerlink&quot; title=&quot;搭建etcd集群服务&quot;&gt;&lt;/a&gt;搭建etcd集群服务&lt;/h1&gt;&lt;h2 id=&quot;Etcd服务应用场景&quot;&gt;&lt;a href=&quot;#Etcd服务应用场景&quot;
      
    
    </summary>
    
      <category term="kubernetes" scheme="http://www.arnolix.com/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="http://www.arnolix.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>搭建Alertmanager服务</title>
    <link href="http://www.arnolix.com/2018/01/28/%E6%90%AD%E5%BB%BAAlertmanager%E6%9C%8D%E5%8A%A1/"/>
    <id>http://www.arnolix.com/2018/01/28/搭建Alertmanager服务/</id>
    <published>2018-01-28T12:18:26.335Z</published>
    <updated>2018-01-27T12:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建Alertmanager服务"><a href="#搭建Alertmanager服务" class="headerlink" title="搭建Alertmanager服务"></a>搭建Alertmanager服务</h1><h2 id="什么是Alertmanager"><a href="#什么是Alertmanager" class="headerlink" title="什么是Alertmanager?"></a>什么是Alertmanager?</h2><p>Alertmanager主要处理由类似Prometheus服务器等客户端发来的警报，之后需要删除重复、分组，并将它们通过路由发送到正确的接收器，比如电子邮件、Slack等。</p><p>Alertmanager与Prometheus是相互分离的两个部分。Prometheus服务器根据报警规则将警报发送给Alertmanager，然后Alertmanager将silencing、inhibition、aggregation等消息通过电子邮件、PaperDuty和HipChat发送通知。</p><h2 id="下载Alertmanager文件"><a href="#下载Alertmanager文件" class="headerlink" title="下载Alertmanager文件"></a>下载Alertmanager文件</h2><p>注意：本示例用的<code>Alertmanager yaml</code>文件均是在本地测试环境使用的，请自行修改配置文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mkdir alertmanger &amp;&amp; cd alertmanger</span></div><div class="line"><span class="comment"># wget https://raw.githubusercontent.com/Donyintao/Prometheus/master/alertmanager-deployment.yaml</span></div><div class="line"><span class="comment"># wget https://raw.githubusercontent.com/Donyintao/Prometheus/master/alertmanager-configmap.yaml</span></div><div class="line"><span class="comment"># wget https://raw.githubusercontent.com/Donyintao/Prometheus/master/alertmanager-ingress.yaml</span></div></pre></td></tr></table></figure></p><h2 id="安装Alertmanager服务"><a href="#安装Alertmanager服务" class="headerlink" title="安装Alertmanager服务"></a>安装Alertmanager服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># kubectl apply -f .</span></div><div class="line">configmap <span class="string">"alertmanager"</span> created</div><div class="line">deployment <span class="string">"alertmanager"</span> created</div><div class="line">service <span class="string">"alertmanager"</span> created</div><div class="line">ingress <span class="string">"alertmanager"</span> created</div><div class="line"></div><div class="line"><span class="comment"># kubectl get pod -n monitoring</span></div><div class="line">NAME                             READY     STATUS    RESTARTS   AGE</div><div class="line">alertmanager-1688473584-hzd51    1/1       Running   0          9d</div><div class="line"></div><div class="line"><span class="comment"># kubectl get ingress -n monitoring   </span></div><div class="line">NAME           HOSTS                 ADDRESS        PORTS     AGE</div><div class="line">alertmanager   alert.host.com        192.168.3.99   80        9d</div></pre></td></tr></table></figure><h2 id="验证Alertmanager服务"><a href="#验证Alertmanager服务" class="headerlink" title="验证Alertmanager服务"></a>验证Alertmanager服务</h2><p>这时通过浏览器访问<code>http://alert.host.com</code>来访问<code>Alertmanager</code>的界面，查看的页面查看<code>FILTER</code>是空的，这是因为Prometheus还没有和Alertmanager建立联系。<br><img src="./images/alertmanager.jpg" alt="Alertmanager"></p><h2 id="Prometheus-rules配置"><a href="#Prometheus-rules配置" class="headerlink" title="Prometheus rules配置"></a>Prometheus rules配置</h2><p>设置警报和通知的主要步骤流程(其实就简单三步，但是写的话，总感觉很复杂的样子)：</p><ul><li>安装配置Alertmanager</li><li>在Prometheus中创建告警规则</li><li>配置Prometheus通过-alertmanager.url标志与Alertmanager通信</li></ul><p>使用ConfigMap方式，创建Prometheus rules文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim prometheus-rules-configmap.yaml</span></div><div class="line">apiVersion: v1</div><div class="line">kind: ConfigMap</div><div class="line">metadata:</div><div class="line">  creationTimestamp: null</div><div class="line">  name: prometheus-rules</div><div class="line">  namespace: monitoring</div><div class="line">data:</div><div class="line">  prometheus.rules: |</div><div class="line">    ALERT Container_Memory_RSS</div><div class="line">      IF ((sum(container_memory_rss&#123;job=<span class="string">"kubernetes-cadvisor"</span>,pod_name!=<span class="string">""</span>&#125;) by (pod_name)) /(sum(container_spec_memory_limit_bytes&#123;job=<span class="string">"kubernetes-cadvisor"</span>,pod_name!=<span class="string">""</span>&#125;) by (pod_name)) * 100) &gt; 95</div><div class="line">      FOR 1m</div><div class="line">      LABELS &#123; severity = <span class="string">"剩余内存: &#123;&#123; <span class="variable">$value</span> &#125;&#125;"</span> &#125;</div><div class="line">      ANNOTATIONS &#123;</div><div class="line">        summary = <span class="string">"检测内存使用率过高."</span>,</div><div class="line">        description = <span class="string">"使用内存高于 95%. 使用内存: &#123;&#123; <span class="variable">$value</span> &#125;&#125;"</span></div><div class="line">      &#125;</div><div class="line"> </div><div class="line">    ALERT Container_Network_RX_Average</div><div class="line">      IF ((sum (rate (container_network_receive_bytes_total&#123;job=<span class="string">"kubernetes-nodes"</span>,pod_name!=<span class="string">""</span>&#125;[1m])) by (pod_name)) / 1024) &gt; 102400</div><div class="line">      FOR 1m</div><div class="line">      LABELS &#123; severity = <span class="string">"RX带宽使用率: &#123;&#123; <span class="variable">$value</span> &#125;&#125;"</span> &#125;</div><div class="line">      ANNOTATIONS &#123;</div><div class="line">        summary = <span class="string">"检测网络带宽使用率过高."</span>,</div><div class="line">        description = <span class="string">"网络带宽使用高于 100M. RX带宽使用率: &#123;&#123; <span class="variable">$value</span> &#125;&#125;"</span></div><div class="line">      &#125;</div><div class="line">       </div><div class="line">    ALERT Container_Network_TX_Average</div><div class="line">      IF ((sum (rate (container_network_transmit_bytes_total&#123;job=<span class="string">"kubernetes-nodes"</span>,pod_name!=<span class="string">""</span>&#125;[1m])) by (pod_name)) / 1024) &gt; 102400</div><div class="line">      FOR 1m</div><div class="line">      LABELS &#123; severity = <span class="string">"TX带宽使用率: &#123;&#123; <span class="variable">$value</span> &#125;&#125;"</span> &#125;</div><div class="line">      ANNOTATIONS &#123;</div><div class="line">        summary = <span class="string">"检测网络带宽使用率过高."</span>,</div><div class="line">        description = <span class="string">"网络带宽使用高于 100M. TX带宽使用率: &#123;&#123; <span class="variable">$value</span> &#125;&#125;"</span></div><div class="line">      &#125;  </div><div class="line"> </div><div class="line">    ALERT Container_USAGE_CPU_Average</div><div class="line">      IF ((sum(rate(container_cpu_usage_seconds_total&#123;job=<span class="string">"kubernetes-nodes"</span>,image!=<span class="string">""</span>,pod_name!=<span class="string">""</span>&#125;[1m])) BY (pod_name)) * 100) &gt; 95</div><div class="line">      FOR 1m</div><div class="line">      FOR 1m</div><div class="line">      LABELS &#123; severity = <span class="string">"CPU使用率: &#123;&#123; <span class="variable">$value</span> &#125;&#125;"</span> &#125;</div><div class="line">      ANNOTATIONS &#123;</div><div class="line">        summary = <span class="string">"检测CPU使用率过高."</span>,</div><div class="line">        description = <span class="string">"CPU使用高于 95%. CPU使用率: &#123;&#123; <span class="variable">$value</span> &#125;&#125;"</span></div><div class="line">      &#125;</div><div class="line">      </div><div class="line"><span class="comment"># kubectl apply -f prometheus-rules-configmap.yaml </span></div><div class="line">configmap <span class="string">"prometheus-rules"</span> created</div></pre></td></tr></table></figure><p>修改<code>prometheus-configmap.yaml</code>文件，在<code>global</code>配置下增加两行内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rule_files:</div><div class="line">  - <span class="string">'/etc/prometheus-rules/*.rules'</span></div></pre></td></tr></table></figure><p>修改<code>prometheus-deployment.yaml</code>文件，在<code>containers.args</code>配置下增加<code>Alertmanager url</code>地址，用于发送报警规则。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">containers:</div><div class="line">  args:</div><div class="line">    - <span class="string">'-alertmanager.url=http://alertmanager'</span></div></pre></td></tr></table></figure><p>修改<code>prometheus-deployment.yaml</code>文件，在<code>containers</code>配置下增加rules-volume挂载，用于存储报警规则文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">containers:</div><div class="line">  - name: rules-volume</div><div class="line">    mountPath: /etc/prometheus-rules</div><div class="line">- name: rules-volume</div><div class="line">  configMap:</div><div class="line">    name: prometheus-rules</div></pre></td></tr></table></figure><h2 id="重新加载Prometheus服务"><a href="#重新加载Prometheus服务" class="headerlink" title="重新加载Prometheus服务"></a>重新加载Prometheus服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># kubectl apply -f prometheus-configmap.yaml  -f prometheus-deployment.yaml                           </span></div><div class="line">configmap <span class="string">"prometheus"</span> configured                  </div><div class="line">deployment <span class="string">"prometheus"</span> configured</div><div class="line">service <span class="string">"prometheus"</span> configured</div></pre></td></tr></table></figure><h2 id="验证Prometheus报警规则"><a href="#验证Prometheus报警规则" class="headerlink" title="验证Prometheus报警规则"></a>验证Prometheus报警规则</h2><p>这时通过浏览器访问<code>http://prometheus.host.com</code>来访问<code>Alert</code>的界面，会发现已经有新生成的报警规则；绿色表示：正常，红色表示：异常。<br><img src="./images/prometheus-alert.jpg" alt="Prometheus-rules"></p><p>再次通过浏览器访问<code>http://alert.host.com</code>来访问<code>Alertmanager</code>的界面，查看的页面查看<code>FILTER</code>已经有数据了，这是因为Prometheus已经和Alertmanager建立联系。<br><img src="./images/alertmanager-info.jpg" alt="alertmanager-info"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建Alertmanager服务&quot;&gt;&lt;a href=&quot;#搭建Alertmanager服务&quot; class=&quot;headerlink&quot; title=&quot;搭建Alertmanager服务&quot;&gt;&lt;/a&gt;搭建Alertmanager服务&lt;/h1&gt;&lt;h2 id=&quot;什么是Alertm
      
    
    </summary>
    
      <category term="kubernetes" scheme="http://www.arnolix.com/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="http://www.arnolix.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>搭建Docker-Registry</title>
    <link href="http://www.arnolix.com/2018/01/28/%E6%90%AD%E5%BB%BADocker-Registry/"/>
    <id>http://www.arnolix.com/2018/01/28/搭建Docker-Registry/</id>
    <published>2018-01-28T12:18:26.335Z</published>
    <updated>2018-01-27T12:56:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建Docker私有仓库"><a href="#搭建Docker私有仓库" class="headerlink" title="搭建Docker私有仓库"></a>搭建Docker私有仓库</h1><h2 id="为什么要使用Docker私有仓库？"><a href="#为什么要使用Docker私有仓库？" class="headerlink" title="为什么要使用Docker私有仓库？"></a>为什么要使用Docker私有仓库？</h2><p>使用私有仓库有许多优点： </p><ul><li>节省网络带宽，针对于每个镜像不用每个人都去中央仓库上面去下载，只需要从私有仓库中下载即可；</li><li>提供镜像资源利用，针对于公司内部使用的镜像，推送到本地的私有仓库中，以供公司内部相关人员使用。</li></ul><h2 id="安装Docker-Registry"><a href="#安装Docker-Registry" class="headerlink" title="安装Docker Registry"></a>安装Docker Registry</h2><p>推荐使用Docker-compose管理工具：</p><ul><li>Docker-compose是一个非常有用的Docker运行，管理的工具。</li><li>可以通过定义compose文件，使用简单的一条命令同时起多个Docker Container运行不同的服务。</li><li>Docker-compose对于开发，测试，环境保存以及CI都提供了非常大的便利。</li></ul><h2 id="安装Docker-compose管理工具"><a href="#安装Docker-compose管理工具" class="headerlink" title="安装Docker-compose管理工具"></a>安装Docker-compose管理工具</h2><p>注意：使用pip安装的docker-compose可能在执行时还会报代码有bug；推荐直接从github中下载稳定的release版本安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># curl -L https://github.com/docker/compose/releases/download/1.16.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span></div><div class="line"><span class="comment"># chmod +x /usr/local/bin/docker-compose</span></div></pre></td></tr></table></figure></p><h2 id="配置Registry-Container和Registry-UI"><a href="#配置Registry-Container和Registry-UI" class="headerlink" title="配置Registry Container和Registry UI"></a>配置Registry Container和Registry UI</h2><p>创建<code>docker-registry</code>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mkdir -p /usr/local/docker-registry &amp;&amp; cd /usr/local/docker-registry</span></div><div class="line"><span class="comment"># mdkir -p ./registry/&#123;data,conf&#125;</span></div></pre></td></tr></table></figure><p>创建配置文件<code>config-ui.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim ./registry/conf/config-ui.yml</span></div><div class="line">registry:</div><div class="line">  url: http://192.168.100.115:5000/v2/</div><div class="line">  name: registry.host.com</div><div class="line">  <span class="built_in">readonly</span>: <span class="literal">false</span></div><div class="line">  auth:</div><div class="line">    enabled: <span class="literal">false</span></div></pre></td></tr></table></figure><p>创建配置文件<code>config-srv.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim ./registry/conf/config-ui.yml</span></div><div class="line">version: 0.1</div><div class="line">storage:</div><div class="line">  filesystem:</div><div class="line">    rootdirectory: /var/lib/registry</div><div class="line">  delete:</div><div class="line">    enabled: <span class="literal">true</span></div><div class="line">http:</div><div class="line">  addr: 0.0.0.0:5000</div><div class="line"><span class="built_in">log</span>:</div><div class="line">  level: info</div><div class="line">```  </div><div class="line"></div><div class="line"><span class="comment">## 配置Nginx反向代理</span></div><div class="line"></div><div class="line">创建`Nginx`配置目录</div><div class="line">``` bash</div><div class="line"><span class="comment"># mkdir ./nginx/conf</span></div></pre></td></tr></table></figure><p>创建配置文件<code>registry.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">vim ./nginx/conf/registry.conf</div><div class="line">upstream docker-registry &#123;</div><div class="line">    server 192.168.100.115:5000;</div><div class="line">&#125;</div><div class="line"></div><div class="line">upstream docker-registry-ui &#123;</div><div class="line">    server 192.168.100.115:8080;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    listen 443 ssl;</div><div class="line">    server_name registry.host.com;</div><div class="line"></div><div class="line">    <span class="comment"># SSL</span></div><div class="line">    ssl_certificate /etc/nginx/conf.d/server.pem;</div><div class="line">    ssl_certificate_key /etc/nginx/conf.d/server-key.pem;</div><div class="line"></div><div class="line">    client_max_body_size 0;</div><div class="line"></div><div class="line">    chunked_transfer_encoding on;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass                          http://docker-registry-ui;</div><div class="line">        proxy_set_header  Host              <span class="variable">$http_host</span>;   <span class="comment"># required for docker client's sake</span></div><div class="line">        proxy_set_header  X-Real-IP         <span class="variable">$remote_addr</span>; <span class="comment"># pass on real client's IP</span></div><div class="line">        proxy_set_header  X-Forwarded-For   <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">        proxy_set_header  X-Forwarded-Proto <span class="variable">$scheme</span>;</div><div class="line">        proxy_read_timeout                  900;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location /v2/ &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ <span class="string">"^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$"</span> ) &#123;</div><div class="line">            <span class="built_in">return</span> 404;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        proxy_pass                          http://docker-registry;</div><div class="line">        proxy_set_header  Host              <span class="variable">$http_host</span>;   <span class="comment"># required for docker client's sake</span></div><div class="line">        proxy_set_header  X-Real-IP         <span class="variable">$remote_addr</span>; <span class="comment"># pass on real client's IP</span></div><div class="line">        proxy_set_header  X-Forwarded-For   <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">        proxy_set_header  X-Forwarded-Proto <span class="variable">$scheme</span>;</div><div class="line">        proxy_read_timeout                  900;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建Docker-compose配置文件<code>docker-compose.yml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim docker-compose.yml</span></div><div class="line">nginx:</div><div class="line">  image: nginx:1.10</div><div class="line">  ports:</div><div class="line">    - 192.168.100.115:80:80</div><div class="line">    - 192.168.100.115:443:443</div><div class="line">  links:</div><div class="line">    - registry:registry</div><div class="line">  volumes:</div><div class="line">    - ./nginx/conf:/etc/nginx/conf.d</div><div class="line">registry:</div><div class="line">  image: registry:2.6</div><div class="line">  ports:</div><div class="line">    - 192.168.100.115:5000:5000</div><div class="line">  environment:</div><div class="line">    REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /data</div><div class="line">  volumes:</div><div class="line">    - ./registry/data:/data</div><div class="line">    - ./registry/conf/config-srv.yml:/etc/docker/registry/config.yml:ro</div><div class="line">registry-ui:</div><div class="line">  image: hyper/docker-registry-web</div><div class="line">  ports:</div><div class="line">    - 192.168.100.115:8080:8080</div><div class="line">  volumes:</div><div class="line">    - ./registry/conf/config-ui.yml:/conf/config.yml:ro</div></pre></td></tr></table></figure><h2 id="创建Nginx服务使用的TLS证书"><a href="#创建Nginx服务使用的TLS证书" class="headerlink" title="创建Nginx服务使用的TLS证书"></a>创建Nginx服务使用的TLS证书</h2><p>创建CA(Certificate Authority)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mkdir -p /tmp/ssl &amp;&amp; cd /tmp/ssl</span></div><div class="line"><span class="comment"># cfssl print-defaults config &gt; ca-config.json</span></div><div class="line"><span class="comment"># cat ca-config.json</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"signing"</span>: &#123;</div><div class="line">    <span class="string">"default"</span>: &#123;</div><div class="line">      <span class="string">"expiry"</span>: <span class="string">"87600h"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"profiles"</span>: &#123;</div><div class="line">      <span class="string">"kubernetes"</span>: &#123;</div><div class="line">        <span class="string">"usages"</span>: [</div><div class="line">            <span class="string">"signing"</span>,</div><div class="line">            <span class="string">"key encipherment"</span>,</div><div class="line">            <span class="string">"server auth"</span>,</div><div class="line">            <span class="string">"client auth"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"expiry"</span>: <span class="string">"87600h"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建<code>CA</code>证书签名请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cfssl print-defaults csr &gt; ca-csr.json </span></div><div class="line"><span class="comment"># cat ca-csr.json </span></div><div class="line">&#123;</div><div class="line">  <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</div><div class="line">  <span class="string">"key"</span>: &#123;</div><div class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</div><div class="line">    <span class="string">"size"</span>: 2048</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"names"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</div><div class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</div><div class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>生成<code>CA</code>证书和私钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span></div></pre></td></tr></table></figure><p>创建<code>docker-registry</code>证书签名请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">cat &gt; docker-registry-csr.json &lt;&lt;EOF</div><div class="line">&#123;</div><div class="line">  <span class="string">"CN"</span>: <span class="string">"docker"</span>,</div><div class="line">  <span class="string">"hosts"</span>: [</div><div class="line">    <span class="string">"127.0.0.1"</span>,</div><div class="line">    <span class="string">"192.168.100.115"</span>,</div><div class="line">    <span class="string">"registry.host.com"</span>,</div><div class="line">  ],</div><div class="line">  <span class="string">"key"</span>: &#123;</div><div class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</div><div class="line">    <span class="string">"size"</span>: 2048</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"names"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</div><div class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</div><div class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</div><div class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line">EOF</div></pre></td></tr></table></figure><p>生成<code>docker-registry</code>证书和私钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cfssl gencert -ca=ca.pem \</div><div class="line">              -ca-key=ca-key.pem \</div><div class="line">              -config=ca-config.json \</div><div class="line">              -profile=kubernetes docker-registry-csr.json | cfssljson -bare server</div></pre></td></tr></table></figure><h2 id="分发证书"><a href="#分发证书" class="headerlink" title="分发证书"></a>分发证书</h2><p>将<code>TLS</code>证书拷贝到<code>Nginx</code>的配置目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cp -r /tmp/ssl/server*.pem /usr/local/docker-registry/nginx/conf</span></div></pre></td></tr></table></figure></p><h2 id="运行Registry-Container并使用Nginx做代理"><a href="#运行Registry-Container并使用Nginx做代理" class="headerlink" title="运行Registry Container并使用Nginx做代理"></a>运行Registry Container并使用Nginx做代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker-compose up -d    </span></div><div class="line">Starting docker_registry-ui_1 ... </div><div class="line">Starting docker_registry_1 ... </div><div class="line">Starting docker_registry_1</div><div class="line">Starting docker_registry_1 ... <span class="keyword">done</span></div><div class="line">Starting docker_nginx_1 ... </div><div class="line">Starting docker_nginx_1 ... <span class="keyword">done</span></div></pre></td></tr></table></figure><h2 id="验证Registry-Container服务是否正常启动"><a href="#验证Registry-Container服务是否正常启动" class="headerlink" title="验证Registry Container服务是否正常启动"></a>验证Registry Container服务是否正常启动</h2><p>注意：确定docker容器都正常运行后，用curl命令验证功能是否正常运行。使得<code>IP:5000</code>和<code>IP:443</code>访问registry都应该返回<code>{}</code>。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># curl https://192.168.100.115:443/v2/ -k</span></div><div class="line">&#123;&#125;</div><div class="line"><span class="comment"># curl http://192.168.100.115:5000/v2/ -k    </span></div><div class="line">&#123;&#125;</div></pre></td></tr></table></figure><p>这时我们用浏览器访问<code>http://registry.host.com</code>来访问<code>Web Registry</code>的界面会显示正常；如果出现异常，请检查网络和防火墙配置。<br><img src="./images/registry.jpg" alt="Registry"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建Docker私有仓库&quot;&gt;&lt;a href=&quot;#搭建Docker私有仓库&quot; class=&quot;headerlink&quot; title=&quot;搭建Docker私有仓库&quot;&gt;&lt;/a&gt;搭建Docker私有仓库&lt;/h1&gt;&lt;h2 id=&quot;为什么要使用Docker私有仓库？&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="kubernetes" scheme="http://www.arnolix.com/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="http://www.arnolix.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>nginx优化之nopush,sendfile,https,keepalive等</title>
    <link href="http://www.arnolix.com/2017/11/18/nginx-001/"/>
    <id>http://www.arnolix.com/2017/11/18/nginx-001/</id>
    <published>2017-11-18T09:58:22.000Z</published>
    <updated>2017-11-18T10:01:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、nginx之tcp-nopush、tcp-nodelay、sendfile"><a href="#一、nginx之tcp-nopush、tcp-nodelay、sendfile" class="headerlink" title="一、nginx之tcp_nopush、tcp_nodelay、sendfile"></a>一、nginx之tcp_nopush、tcp_nodelay、sendfile</h2><p>1、TCP_NODELAY<br>你怎么可以强制 socket 在它的缓冲区里发送数据？<br>一个解决方案是 TCP 堆栈的 TCP_NODELAY选项。这样就可以使缓冲区中的数据立即发送出去。</p><p>Nginx的 TCP_NODELAY 选项使得在打开一个新的 socket 时增加了TCP_NODELAY选项。但这时会造成一种情况：<br>终端应用程序每产生一次操作就会发送一个包，而典型情况下一个包会拥有一个字节的数据以及40个字节长的包头，于是产生4000%的过载，很轻易地就能令网络发生拥塞。为了避免这种情况，TCP堆栈实现了等待数据 0.2秒钟，因此操作后它不会发送一个数据包，而是将这段时间内的数据打成一个大的包。这一机制是由<strong>Nagle算法</strong>保证。</p><p>Nagle化后来成了一种标准并且立即在因特网上得以实现。它现在已经成为默认配置了，但有些场合下把这一选项关掉也是合乎需要的。现在假设某个应用程序发出了一个请求，希望发送小块数据。我们可以选择立即发送数据或者等待产生更多的数据然后再一次发送两种策略。<br>如果我们马上发送数据，那么交互性的以及客户/服务器型的应用程序将极大地受益。如果请求立即发出那么响应时间也会快一些。以上操作可以通过设置套接字的 TCP_NODELAY = on 选项来完成，这样就禁用了Nagle 算法。（不需要等待0.2s）</p><p>2、TCP_NOPUSH<br>在 nginx 中，tcp_nopush 配置和 tcp_nodelay “互斥”。它可以配置一次发送数据的包大小。也就是说，它不是按时间累计 0.2 秒后发送包，而是当包累计到一定大小后就发送。</p><blockquote><p>注：在 nginx 中，tcp_nopush 必须和 sendfile 搭配使用。</p></blockquote><p>3、sendfile<br>现在流行的web 服务器里面都提供 sendfile选项用来提高服务器性能，那到底 sendfile是什么，怎么影响性能的呢？<br>sendfile实际上是 Linux2.0+以后的推出的一个系统调用，web服务器可以通过调整自身的配置来决定是否利用 sendfile这个系统调用。先来看一下不用 sendfile的传统网络传输过程：<br>read(file,tmp_buf, len);<br>write(socket,tmp_buf, len);</p><blockquote><p>硬盘 &gt;&gt; kernel buffer &gt;&gt; user buffer&gt;&gt; kernel socket buffer &gt;&gt;协议栈</p></blockquote><p>1）一般来说一个网络应用是通过读硬盘数据，然后写数据到socket 来完成网络传输的。上面2行用代码解释了这一点，不过上面2行简单的代码掩盖了底层的很多操作。来看看底层是怎么执行上面2行代码的：</p><ol><li>系统调用 read()产生一个上下文切换：从 user mode 切换到 kernel mode，然后 DMA 执行拷贝，把文件数据从硬盘读到一个 kernel buffer 里。</li><li>数据从 kernel buffer拷贝到 user buffer，然后系统调用 read() 返回，这时又产生一个上下文切换：从kernel mode 切换到 user mode。</li><li>系统调用write()产生一个上下文切换：从 user mode切换到 kernel mode，然后把步骤2读到 user buffer的数据拷贝到 kernel buffer（数据第2次拷贝到 kernel buffer），不过这次是个不同的 kernel buffer，这个 buffer和 socket相关联。</li><li>系统调用 write()返回，产生一个上下文切换：从 kernel mode 切换到 user mode（第4次切换了），然后 DMA 从 kernel buffer拷贝数据到协议栈（第4次拷贝了）。</li></ol><p>上面4个步骤有4次上下文切换，有4次拷贝，我们发现如果能减少切换次数和拷贝次数将会有效提升性能。在kernel2.0+ 版本中，系统调用 sendfile() 就是用来简化上面步骤提升性能的。sendfile() 不但能减少切换次数而且还能减少拷贝次数。</p><p>2）再来看一下用 sendfile()来进行网络传输的过程：<br>sendfile(socket,file, len);</p><blockquote><p>硬盘 &gt;&gt; kernel buffer (快速拷贝到kernelsocket buffer) &gt;&gt;协议栈</p></blockquote><ol><li>系统调用sendfile()通过 DMA把硬盘数据拷贝到 kernel buffer，然后数据被 kernel直接拷贝到另外一个与 socket相关的 kernel buffer。这里没有 user mode和 kernel mode之间的切换，在 kernel中直接完成了从一个 buffer到另一个 buffer的拷贝。</li><li>DMA 把数据从 kernelbuffer 直接拷贝给协议栈，没有切换，也不需要数据从 user mode 拷贝到 kernel mode，因为数据就在 kernel 里。</li></ol><p>步骤减少了，切换减少了，拷贝减少了，自然性能就提升了。这就是为什么说在Nginx 配置文件里打开 sendfile on 选项能提高 web server性能的原因。</p><blockquote><p>综上，这三个参数都应该配置成on：sendfile on; tcp_nopush on; tcp_nodelay on;</p></blockquote><h2 id="二、nginx长连接——keepalive"><a href="#二、nginx长连接——keepalive" class="headerlink" title="二、nginx长连接——keepalive"></a>二、nginx长连接——keepalive</h2><p>当使用nginx作为反向代理时，为了支持长连接，需要做到两点：</p><ul><li>从client到nginx的连接是长连接</li><li>从nginx到server的连接是长连接</li></ul><p>1、保持和client的长连接：</p><p>默认情况下，nginx已经自动开启了对client连接的keep alive支持（同时client发送的HTTP请求要求keep alive）。一般场景可以直接使用，但是对于一些比较特殊的场景，还是有必要调整个别参数（keepalive_timeout和keepalive_requests）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    keepalive_timeout  120s 120s;</div><div class="line">    keepalive_requests 10000;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>1）keepalive_timeout<br>语法:</p><blockquote><p>keepalive_timeout timeout [header_timeout];</p></blockquote><ol><li>第一个参数：设置keep-alive客户端连接在服务器端保持开启的超时值（默认75s）；值为0会禁用keep-alive客户端连接；</li><li>第二个参数：可选、在响应的header域中设置一个值“Keep-Alive: timeout=time”；通常可以不用设置；</li></ol><p>注：keepalive_timeout默认75s，一般情况下也够用，对于一些请求比较大的内部服务器通讯的场景，适当加大为120s或者300s；</p><p>2）keepalive_requests：<br>keepalive_requests指令用于设置一个keep-alive连接上可以服务的请求的最大数量，当最大请求数量达到时，连接被关闭。默认是100。这个参数的真实含义，是指一个keep alive建立之后，nginx就会为这个连接设置一个计数器，记录这个keep alive的长连接上已经接收并处理的客户端请求的数量。如果达到这个参数设置的最大值时，则nginx会强行关闭这个长连接，逼迫客户端不得不重新建立新的长连接。<br>大多数情况下当QPS(每秒请求数)不是很高时，默认值100凑合够用。但是，对于一些QPS比较高（比如超过10000QPS，甚至达到30000,50000甚至更高) 的场景，默认的100就显得太低。<br>简单计算一下，QPS=10000时，客户端每秒发送10000个请求(通常建立有多个长连接)，每个连接只能最多跑100次请求，意味着平均每秒钟就会有100个长连接因此被nginx关闭。同样意味着为了保持QPS，客户端不得不每秒中重新新建100个连接。因此，就会发现有大量的TIME_WAIT的socket连接(即使此时keep alive已经在client和nginx之间生效)。因此对于QPS较高的场景，非常有必要加大这个参数，以避免出现大量连接被生成再抛弃的情况，减少TIME_WAIT。</p><p>2、保持和server的长连接：<br>为了让nginx和后端server（nginx称为upstream）之间保持长连接，典型设置如下：（默认nginx访问后端都是用的短连接(HTTP1.0)，一个请求来了，Nginx 新开一个端口和后端建立连接，后端执行完毕后主动关闭该链接）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    upstream  BACKEND &#123;</div><div class="line">        server   192.168.0.1：8080  weight=1 max_fails=2 fail_timeout=30s;</div><div class="line">        server   192.168.0.2：8080  weight=1 max_fails=2 fail_timeout=30s;</div><div class="line">        keepalive 300;        // 这个很重要！</div><div class="line">    &#125;</div><div class="line">server &#123;</div><div class="line">        listen 8080 default_server;</div><div class="line">        server_name &quot;&quot;;</div><div class="line">        location /  &#123;</div><div class="line">            proxy_pass http://BACKEND;</div><div class="line">            proxy_set_header Host  $Host;</div><div class="line">            proxy_set_header x-forwarded-for $remote_addr;</div><div class="line">            proxy_set_header X-Real-IP $remote_addr;</div><div class="line">            add_header Cache-Control no-store;</div><div class="line">            add_header Pragma  no-cache;</div><div class="line">            proxy_http_version 1.1;         // 这两个最好也设置</div><div class="line">            proxy_set_header Connection &quot;&quot;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>1）location中有两个参数需要设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    server &#123;</div><div class="line">        location /  &#123;</div><div class="line">            proxy_http_version 1.1; // 这两个最好也设置</div><div class="line">            proxy_set_header Connection &quot;&quot;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>HTTP协议中对长连接的支持是从1.1版本之后才有的，因此最好通过proxy_http_version指令设置为”1.1”；</p><p>而”Connection” header应该被清理。清理的意思，我的理解，是清理从client过来的http header，因为即使是client和nginx之间是短连接，nginx和upstream之间也是可以开启长连接的。这种情况下必须清理来自client请求中的”Connection” header。</p><p>2）upstream中的keepalive设置：<br>此处keepalive的含义不是开启、关闭长连接的开关；也不是用来设置超时的timeout；更不是设置长连接池最大连接数。官方解释：</p><ol><li>The connections parameter sets the maximum number of idle keepalive connections to upstream servers connections（设置到upstream服务器的空闲keepalive连接的最大数量）</li><li>When this number is exceeded, the least recently used connections are closed. （当这个数量被突破时，最近使用最少的连接将被关闭）</li><li>It should be particularly noted that the keepalive directive does not limit the total number of connections to upstream servers that an nginx worker process can open.（特别提醒：keepalive指令不会限制一个nginx worker进程到upstream服务器连接的总数量）</li></ol><p>我们先假设一个场景： 有一个HTTP服务，作为upstream服务器接收请求，响应时间为100毫秒。如果要达到10000 QPS的性能，就需要在nginx和upstream服务器之间建立大约1000条HTTP连接。nginx为此建立连接池，然后请求过来时为每个请求分配一个连接，请求结束时回收连接放入连接池中，连接的状态也就更改为idle。我们再假设这个upstream服务器的keepalive参数设置比较小，比如常见的10.</p><p>A、假设请求和响应是均匀而平稳的，那么这1000条连接应该都是一放回连接池就立即被后续请求申请使用，线程池中的idle线程会非常的少，趋进于零，不会造成连接数量反复震荡。</p><p>B、显示中请求和响应不可能平稳，我们以10毫秒为一个单位，来看连接的情况(注意场景是1000个线程+100毫秒响应时间，每秒有10000个请求完成)，我们假设应答始终都是平稳的，只是请求不平稳，第一个10毫秒只有50,第二个10毫秒有150：</p><ol><li>下一个10毫秒，有100个连接结束请求回收连接到连接池，但是假设此时请求不均匀10毫秒内没有预计的100个请求进来，而是只有50个请求。注意此时连接池回收了100个连接又分配出去50个连接，因此连接池内有50个空闲连接。</li><li>然后注意看keepalive=10的设置，这意味着连接池中最多容许保留有10个空闲连接。因此nginx不得不将这50个空闲连接中的40个关闭，只留下10个。</li><li>再下一个10个毫秒，有150个请求进来，有100个请求结束任务释放连接。150 - 100 = 50,空缺了50个连接，减掉前面连接池保留的10个空闲连接，nginx不得不新建40个新连接来满足要求。</li></ol><p>C、同样，如果假设相应不均衡也会出现上面的连接数波动情况。</p><p>造成连接数量反复震荡的一个推手，就是这个keepalive 这个最大空闲连接数。毕竟连接池中的1000个连接在频繁利用时，出现短时间内多余10个空闲连接的概率实在太高。因此为了避免出现上面的连接震荡，必须考虑加大这个参数，比如上面的场景如果将keepalive设置为100或者200,就可以非常有效的缓冲请求和应答不均匀。</p><p>总结：<br>keepalive 这个参数一定要小心设置，尤其对于QPS比较高的场景，推荐先做一下估算，根据QPS和平均响应时间大体能计算出需要的长连接的数量。比如前面10000 QPS和100毫秒响应时间就可以推算出需要的长连接数量大概是1000. 然后将keepalive设置为这个长连接数量的10%到30%。比较懒的同学，可以直接设置为keepalive=1000之类的，一般都OK的了。</p><p>3、综上，出现大量TIME_WAIT的情况<br>1）导致 nginx端出现大量TIME_WAIT的情况有两种：</p><ul><li>keepalive_requests设置比较小，高并发下超过此值后nginx会强制关闭和客户端保持的keepalive长连接；（主动关闭连接后导致nginx出现TIME_WAIT）</li><li>keepalive设置的比较小（空闲数太小），导致高并发下nginx会频繁出现连接数震荡（超过该值会关闭连接），不停的关闭、开启和后端server保持的keepalive长连接；</li></ul><p>2）导致后端server端出现大量TIME_WAIT的情况：<br>nginx没有打开和后端的长连接，即：没有设置proxy_http_version 1.1;和proxy_set_header Connection “”;从而导致后端server每次关闭连接，高并发下就会出现server端出现大量TIME_WAIT</p><h2 id="三、nginx配置https"><a href="#三、nginx配置https" class="headerlink" title="三、nginx配置https"></a>三、nginx配置https</h2><p>1、配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen                  80  default_server;</div><div class="line">    listen          443 ssl;</div><div class="line">    server_name     toutiao.iqiyi.com  toutiao.qiyi.domain m.toutiao.iqiyi.com;</div><div class="line">    root            /data/none;</div><div class="line">    index           index.php index.html index.htm;</div><div class="line"></div><div class="line"></div><div class="line">    ###ssl settings start</div><div class="line">    ssl_protocols                   TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">    ssl_certificate                 /usr/local/nginx/conf/server.pem;</div><div class="line">    ssl_certificate_key             /usr/local/nginx/conf/server.key;</div><div class="line">    ssl_session_cache               shared:SSL:10m;</div><div class="line">    ssl_session_timeout             10m;</div><div class="line">    ssl_ciphers ALL:!kEDH!ADH:RC4+RSA:+HIGH:+EXP;</div><div class="line">    ssl_prefer_server_ciphers       on;</div><div class="line">    ###ssl settings end</div><div class="line">…</div></pre></td></tr></table></figure><p>2、性能比较：<br>通过https访问Nginx一般会比http访问慢30%（https方式访问主要是耗Nginx服务器的cpu）通过下面实验验证：</p><ol><li>nginx后端挂了5台java服务器，java服务器中有个简单的java程序，从redis缓存随机读取一个value值输出到前端；（挂的java服务器越多，对nginx压力越大）</li><li>压测nginx，3000并发，一共请求30000次，返回结果都是200的情况下进行对比；<br>实验结果：<br>A、服务器负载对比：<br>https访问，服务器cpu最高可以达到20%，而http的访问，服务器cpu基本在1%左右；无论那种访问，nginx服务器负载、内存都不高；<br>B、nginx吞吐量对比（qps）：<br>• https访问，30000次请求花了28s；（是http的3倍）<br>• http访问，30000次请求花了9s；</li></ol><p>统计qps时，每次清空nginx日志，然后加压，执行完毕后使用如下命令查看qps：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cat log.2.3000https | grep &apos;/api/news/v1/info?newsId=&apos; | awk &apos;&#123;print$3&#125;&apos;| uniq | wc -l</div><div class="line">37</div></pre></td></tr></table></figure><p>注：不能持续加压，否则无限加大压力后往往是后端java服务出现瓶颈，导致返回给nginx的响应变慢，从而使得nginx压力变小。</p><p>3、优化：<br>Nginx默认使用DHE算法来产生密匙，该加密算法效率很低。可以通过如下命令，删掉了kEDH算法。<br>ssl_ciphers ALL:!kEDH!ADH:RC4+RSA:+HIGH:+EXP;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、nginx之tcp-nopush、tcp-nodelay、sendfile&quot;&gt;&lt;a href=&quot;#一、nginx之tcp-nopush、tcp-nodelay、sendfile&quot; class=&quot;headerlink&quot; title=&quot;一、nginx之tcp_no
      
    
    </summary>
    
      <category term="nginx" scheme="http://www.arnolix.com/categories/nginx/"/>
    
    
      <category term="nginx keepalive nopush sendfile" scheme="http://www.arnolix.com/tags/nginx-keepalive-nopush-sendfile/"/>
    
  </entry>
  
  <entry>
    <title>pm2简介</title>
    <link href="http://www.arnolix.com/2017/10/13/pm2/"/>
    <id>http://www.arnolix.com/2017/10/13/pm2/</id>
    <published>2017-10-13T02:32:31.000Z</published>
    <updated>2017-10-13T02:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是pm2"><a href="#一、什么是pm2" class="headerlink" title="一、什么是pm2"></a>一、什么是pm2</h2><p>PM2是node进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。</p><h2 id="二、pm2的安装"><a href="#二、pm2的安装" class="headerlink" title="二、pm2的安装"></a>二、pm2的安装</h2><p>全局安装，简直不能更简单。一行代码搞定：npm install -g pm2</p><h3 id="1、目录介绍"><a href="#1、目录介绍" class="headerlink" title="1、目录介绍"></a>1、目录介绍</h3><p>pm2安装好后，会自动在运行目录创建下面文件。</p><ul><li><code>$HOME/.pm2</code> ：will contain all PM2 related files</li><li><code>$HOME/.pm2/logs</code> ：will contain all applications logs</li><li><code>$HOME/.pm2/pids</code> ：will contain all applications pids</li><li><code>$HOME/.pm2/pm2.log ：</code>PM2 logs</li><li><code>$HOME/.pm2/pm2.pid ：</code> PM2 pid</li><li><code>$HOME/.pm2/rpc.sock ：</code> Socket file for remote commands</li><li><code>$HOME/.pm2/pub.sock ：</code> Socket file for publishable events</li><li><code>$HOME/.pm2/conf.js ：</code> PM2 Configuration</li></ul><h3 id="2、入门教程"><a href="#2、入门教程" class="headerlink" title="2、入门教程"></a>2、入门教程</h3><p>拿express应用来举例。一般我们都是通过<code>npm start</code>启动应用：<code>node ./bin/main.js</code>。那么，换成pm2就是：pm2 start ./bin/www –watch</p><p>（注意，这里用了<code>--watch</code>参数，意味着当你的express应用代码发生变化时，pm2会帮你重启服务）</p><p>pm2的门槛很低，实在是没什么好讲的，详细请自行参阅文档。</p><p>官方文档：<a href="http://pm2.keymetrics.io/docs/usage/quick-start" target="_blank" rel="external">http://pm2.keymetrics.io/docs/usage/quick-start</a></p><h2 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h2><h3 id="1、启动"><a href="#1、启动" class="headerlink" title="1、启动"></a>1、启动</h3><p>参数说明：</p><ul><li><code>--watch</code>：监听应用目录的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件。</li><li><code>-i --instances</code>：启用多少个实例，可用于负载均衡。如果<code>-i 0</code>或者<code>-i max</code>，则根据当前机器核数确定实例数目。</li><li><code>--ignore-watch</code>：排除监听的目录/文件，可以是特定的文件名，也可以是正则。比如<code>--ignore-watch=&quot;test node_modules &quot;some scripts&quot;&quot;</code></li><li><code>-n --name</code>：应用的名称。查看应用信息的时候可以用到。</li><li><code>-o --output &lt;path&gt;</code>：标准输出日志文件的路径。</li><li><code>-e --error &lt;path&gt;</code>：错误输出日志文件的路径。</li><li><code>--interpreter &lt;interpreter&gt;</code>：the interpreter pm2 should use for executing app (bash, python…)。比如你用的coffee script来编写应用。</li></ul><p>完整命令行参数列表：<a href="http://pm2.keymetrics.io/docs/usage/quick-start/#options" target="_blank" rel="external">http://pm2.keymetrics.io/docs/usage/quick-start/#options</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">（ci的nodejs工程部署目前还只能支持start命令的启动方式）</div></pre></td></tr></table></figure><h3 id="2、重启"><a href="#2、重启" class="headerlink" title="2、重启"></a>2、重启</h3><p><code>pm2 restart app.js</code></p><p><code>pm2 reload app.js</code></p><p><code>pm2 gracefulReload app.js (推荐)</code></p><h3 id="3、停止"><a href="#3、停止" class="headerlink" title="3、停止"></a>3、停止</h3><p>(停止特定的应用。可以先通过<code>pm2 list</code>获取应用的名字（–name指定的）或者进程id。)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 stop app_name|app_id</div></pre></td></tr></table></figure><p>如果要停止所有应用，可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 stop all</div></pre></td></tr></table></figure><h3 id="4、查看进程状态"><a href="#4、查看进程状态" class="headerlink" title="4、查看进程状态"></a>4、查看进程状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 list</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 prettylist (推荐)</div></pre></td></tr></table></figure><h3 id="5、查看某个进程的信息"><a href="#5、查看某个进程的信息" class="headerlink" title="5、查看某个进程的信息"></a>5、查看某个进程的信息</h3><p><code>pm2 describe 0(pm_id)</code></p><h2 id="四、配置文件"><a href="#四、配置文件" class="headerlink" title="四、配置文件"></a>四、配置文件</h2><h3 id="1、简单说明"><a href="#1、简单说明" class="headerlink" title="1、简单说明"></a>1、简单说明</h3><ul><li>配置文件里的设置项，跟命令行参数基本是一一对应的。</li><li>可以选择<code>yaml</code>或者<code>json</code>文件，就看个人洗好了。（个人推荐：<code>json</code>格式的配置文件，pm2当作普通的js文件来处理，所以可以在里面添加注释或者编写代码，这对于动态调整配置很有好处。）</li><li>如果启动的时候指定了配置文件，那么命令行参数会被忽略。（个别参数除外，比如–env）</li></ul><h3 id="2、例子"><a href="#2、例子" class="headerlink" title="2、例子"></a>2、例子</h3><p>举个简单例子，完整配置说明请参考官方文档：<a href="http://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/" target="_blank" rel="external">http://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;node-test&quot;,</div><div class="line">  &quot;log_date_format&quot;: &quot;YYYY-MM-DD HH:mm:ss SSS&quot;,</div><div class="line">  &quot;script&quot;: &quot;./build/main.js&quot;,</div><div class="line">  &quot;out_file&quot;: &quot;./var/log/app.log&quot;,</div><div class="line">  &quot;error_file&quot;: &quot;./var/log/err.log&quot;,</div><div class="line">  &quot;pid_file&quot;: &quot;./var/pid&quot;,</div><div class="line">  &quot;watch&quot;: true,</div><div class="line">  &quot;exec_mode&quot;: &quot;cluster&quot;,</div><div class="line">  &quot;ignore_watch&quot;: [</div><div class="line">    &quot;var&quot;,</div><div class="line">    &quot;public&quot;,</div><div class="line">    &quot;test&quot;,</div><div class="line">    &quot;.git&quot;,</div><div class="line">    &quot;node_modules&quot;</div><div class="line">  ],</div><div class="line">  &quot;env&quot;: &#123;</div><div class="line">    &quot;NODE_ENV&quot;: &quot;production&quot;,</div><div class="line">    &quot;PORT&quot;: &quot;9101&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;node_args&quot;: &quot;--harmony&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="五、pm2有什么特点？"><a href="#五、pm2有什么特点？" class="headerlink" title="五、pm2有什么特点？"></a>五、pm2有什么特点？</h2><h3 id="1、自动重启"><a href="#1、自动重启" class="headerlink" title="1、自动重启"></a>1、自动重启</h3><p><code>pm2 start app.js --watch</code></p><p>监控整个项目的文件，如果只想监听指定文件和目录，建议通过配置文件的<code>watch</code>、<code>ignore_watch</code>字段来设置。</p><p>建议直接看文档：<a href="http://pm2.keymetrics.io/docs/usage/watch-and-restart/#auto-restart-apps-on-file-change" target="_blank" rel="external">http://pm2.keymetrics.io/docs/usage/watch-and-restart/#auto-restart-apps-on-file-change</a></p><h3 id="2、环境切换"><a href="#2、环境切换" class="headerlink" title="2、环境切换"></a>2、环境切换</h3><p>在实际项目开发中，我们的应用经常需要在多个环境下部署，比如开发环境、测试环境、生产环境等。在不同环境下，有时候配置项会有差异，比如链接的数据库地址不同等。</p><p>对于这种场景，pm2可以很好支持的。首先通过在配置文件中通过<code>env_xx</code>来声明不同环境的配置，然后在启动应用时，通过<code>--env</code>参数指定运行的环境。</p><h4 id="环境配置声明"><a href="#环境配置声明" class="headerlink" title="环境配置声明"></a>环境配置声明</h4><p>首先，在配置文件中，通过<code>env</code>选项声明多个环境配置。简单说明下：</p><ul><li><code>env</code>为默认的环境配置（生产环境），<code>env_dev</code>、<code>env_test</code>则分别是开发、测试环境。可以看到，不同环境下的<code>NODE_ENV</code>、<code>REMOTE_ADDR</code>字段的值是不同的。</li><li>在应用中，可以通过<code>process.env.REMOTE_ADDR</code>等来读取配置中生命的变量。</li></ul><p><code>&quot;env&quot;: { &quot;NODE_ENV&quot;: &quot;production&quot;, &quot;REMOTE_ADDR&quot;: &quot;http://www.example.com/&quot; },</code></p><p><code>&quot;env_dev&quot;: { &quot;NODE_ENV&quot;: &quot;development&quot;, &quot;REMOTE_ADDR&quot;: &quot;http://wdev.example.com/&quot; },</code></p><p><code>&quot;env_test&quot;: { &quot;NODE_ENV&quot;: &quot;test&quot;, &quot;REMOTE_ADDR&quot;: &quot;http://wtest.example.com/&quot; }</code></p><h4 id="启动指明环境"><a href="#启动指明环境" class="headerlink" title="启动指明环境"></a>启动指明环境</h4><p>通过下面启动脚本（开发环境），那么，此时<code>process.env.REMOTE_ADDR</code>的值就是相应的 <a href="http://wdev.example.com/" target="_blank" rel="external">http://wdev.example.com/</a> ，可以自己试验下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 start app.js --env dev</div></pre></td></tr></table></figure><h3 id="3、负载均衡"><a href="#3、负载均衡" class="headerlink" title="3、负载均衡"></a><code>3、</code>负载均衡</h3><p>命令如下，表示开启三个进程。（如果<code>-i 0</code>，则会根据机器当前核数自动开启尽可能多的进程。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pm2 start app.js -i 3 # 开启三个进程</div><div class="line">pm2 start app.js -i max # 根据机器CPU核数，开启对应数目的进程，目前不推荐，推荐使用 -i 0</div></pre></td></tr></table></figure><p>参考文档：<a href="http://pm2.keymetrics.io/docs/usage/cluster-mode/#automatic-load-balancing" target="_blank" rel="external">http://pm2.keymetrics.io/docs/usage/cluster-mode/#automatic-load-balancing</a></p><h3 id="4、日志查看"><a href="#4、日志查看" class="headerlink" title="4、日志查看"></a>4、日志查看</h3><p>除了可以打开日志文件查看日志外，还可以通过<code>pm2 logs</code>来查看实时日志。这点对于线上问题排查非常重要。</p><p>比如某个node服务突然异常重启了，那么可以通过pm2提供的日志工具来查看实时日志，看是不是脚本出错之类导致的异常重启。</p><p><code>pm2 logs</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是pm2&quot;&gt;&lt;a href=&quot;#一、什么是pm2&quot; class=&quot;headerlink&quot; title=&quot;一、什么是pm2&quot;&gt;&lt;/a&gt;一、什么是pm2&lt;/h2&gt;&lt;p&gt;PM2是node进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自
      
    
    </summary>
    
      <category term="hexo" scheme="http://www.arnolix.com/categories/hexo/"/>
    
    
      <category term="nodejs" scheme="http://www.arnolix.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Markdown常用总结</title>
    <link href="http://www.arnolix.com/2017/10/06/markdown/"/>
    <id>http://www.arnolix.com/2017/10/06/markdown/</id>
    <published>2017-10-06T14:38:27.000Z</published>
    <updated>2017-10-06T15:11:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external">维基百科</a></p></blockquote><p>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.example.com" target="_blank" rel="external">链接</a>或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按<code>Ctrl + /</code>查看帮助。 </p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p><img src="/images/md-1001.png" alt="python代码"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@requires_authorization</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></div><div class="line">    <span class="string">'''A docstring'''</span></div><div class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></div><div class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></div><div class="line"><span class="string"><span class="meta">... </span>prompt'''</span></div></pre></td></tr></table></figure><h3 id="LaTeX-公式"><a href="#LaTeX-公式" class="headerlink" title="LaTeX 公式"></a>LaTeX 公式</h3><p>可以创建行内公式，例如 $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。或者块级公式：</p><p>$$  x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><p><img src="/images/md-1003.png" alt="公式"></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><img src="/images/md-1002.png" alt="表格"></p><table><thead><tr><th style="text-align:left">Item</th><th style="text-align:right">Value</th><th style="text-align:center">Qty</th></tr></thead><tbody><tr><td style="text-align:left">Computer</td><td style="text-align:right">1600 USD</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Phone</td><td style="text-align:right">12 USD</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left">Pipe</td><td style="text-align:right">1 USD</td><td style="text-align:center">234</td></tr></tbody></table><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="/images/md-1004.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: Start</div><div class="line">e=&gt;end</div><div class="line">op=&gt;operation: My Operation</div><div class="line">cond=&gt;condition: Yes or No?</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure><p>以及时序图:</p><p><img src="/images/md-1005.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Alice-&gt;Bob: Hello Bob, how are you?</div><div class="line">Note right of Bob: Bob thinks</div><div class="line">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong>想了解更多，请查看<strong>流程图</strong>[语法][3]以及<strong>时序图</strong>[语法][4]。</p></blockquote><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><p>使用 <code>- [ ]</code> 和 <code>- [x]</code> 语法可以创建复选框，实现 todo-list 等功能。例如：</p><ul><li style="list-style: none"><input type="checkbox" checked> 已完成事项</li><li style="list-style: none"><input type="checkbox"> 待办事项1</li><li style="list-style: none"><input type="checkbox"> 待办事项2</li></ul><blockquote><p><strong>注意：</strong>目前支持尚不完全。</p></blockquote><h3 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt text](/images/img.jpg)</div></pre></td></tr></table></figure><p>这个图片的链接为: <a href="http://xxx.xxx/images/img.jpg" target="_blank" rel="external">http://xxx.xxx/images/img.jpg</a></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— &lt;a href=&quot;https://zh.wikipedia.org/wiki/Markdown&quot; target=&quot;_
      
    
    </summary>
    
      <category term="hexo" scheme="http://www.arnolix.com/categories/hexo/"/>
    
    
      <category term="markdown" scheme="http://www.arnolix.com/tags/markdown/"/>
    
  </entry>
  
</feed>
